6,7c6
<  $Header: /notos/gdb-3.0/dist-gdb/RCS/infrun.c,v 1.3 89/04/14 22:15:22 kupfer Exp Locker: binding $
< 
---
>  $Header: /source/M380/gdb-3.0/dist-gdb/RCS/infrun.c,v 1.2 89/03/13 15:23:14 binding Exp $
9,11d7
<  * Revision 1.3  89/04/14  22:15:22  kupfer
<  * <mach.h> -> <kern/mach.h> (I may regret this...)
<  * 
145c141,144
< #include <kern/mach.h>
---
> #include <mach.h>
> #include <mach_exception.h>
> #include <sys/exception.h>
> #include <machine/exception.h>
342a342,346
> #ifdef DEBUG
>   fprintf( stderr, "infrun: proceed: calling resume (%d, %d)\n",
> 	   oneproc || step, stop_signal);
> #endif DEBUG
> 
347a352,355
> #ifdef DEBUG
>   fprintf( stderr, "infrun: proceed: waitint for inferior\n");
> #endif DEBUG
> 
409a418,436
> /* in case of MACH we need to record exceptions on break points and traces */
> /* because wait3() does *not* reliably return the state of the debuggee  */
> /* in the case when a breakpoint is set on a signal handling routine */
> /* in fact, when hitting a breakpoint coincidentally with a signal  */
> /* wait3() would return pid == 0, w == 0 and thus pretend the debuggee no */
> /* longer exists! */
> 
> #ifdef i386
> #define BREAK_POINT EXC_I386_BPT
> #define TRACE_POINT EXC_I386_SGL
> 
> #define MACH_BREAK( x) ( (x) == BREAK_POINT || (x) == TRACE_POINT)
> 
> #define mach_arch_exception mach_i386_exception
> #endif i386
> 
> static char mach_break_cond;
> 
> 
422,424c449
<   fprintf ( stderr, 
< 	    "Mach exception received: exc = %d, code = %d, subcode = %d\n",
< 	    exception, code, subcode);
---
>   mach_arch_exception( "infrun: catch_exc_raise", exception, code, subcode);
425a451,452
>   if ( exception == EXC_BREAKPOINT) 
>     mach_break_cond = code;
440a468,470
> #ifdef DEBUG
>   fprintf( stderr, "infrun: leaving catch_exc_raise\n");
> #endif DEBUG
442a473,474
> #else   MACH_EXC
> #define MACH_BREAK( x) FALSE
492,494d523
< #ifdef MACH
<   static  WAITTYPE w;   /* ugly, but for now.... */
< #else MACH
496d524
< #endif MACH
533a562
> 	mach_break_cond = -1;
542c571
< 	    msg_send (&out_msg.header, MSG_OPTION_NONE, 0);
---
> 	    msg_send_old (&out_msg.header, MSG_OPTION_NONE, 0);
544c573
< 	    break;
---
> 	    break;  
545a575,577
> #ifdef DEBUG
> 	     else mach_error( "infrun: wait_for_inferior", ret); 
> #endif DEBUG
550c582,585
< 	  pid = wait3 (&w, WNOHANG, 0);
---
> 	  pid = wait3 (&w, WNOHANG, 0);  /* do that to set value of w */
> #ifdef DEBUG
> 	  fprintf( stderr, "wait3( w = %o (%d), pid = %d)\n", w, w, pid);
> #endif DEBUG
565,586d599
< #ifdef	MACH
<       /* inferior terminated -> return */
<       if (WIFEXITED (w)) {
< 	terminal_ours_for_output ();
< 	if (WRETCODE (w)) 
< 	  printf ("\nProgram exited with code 0%o.\n", WRETCODE (w));
< 	else printf ("\nProgram exited normally.\n");
< 	fflush (stdout);
< 	inferior_died (); stop_print_frame = 0;
< 	break;
<       }
<       /* If trap_expected is 2, it means continue once more */
<       if (trap_expected > 1) {
< 	trap_expected--; running_in_shell = 1; resume (0, 0);
< 	continue;
<       }
< 
< #ifndef	MACH_EXC
<       compute_current_thread();   
< #endif	!MACH_EXC
< #endif MACH
< 
622,623d634
< #ifdef MACH  /* this is very ugly.... */
< #else
631,632c642
< 
<       if (WIFEXITED (w))
---
>       if ( !MACH_BREAK( mach_break_cond) && WIFEXITED (w))
644d653
< #endif MACH 
646c655
<       if (!WIFSTOPPED (w))
---
>       if ( !MACH_BREAK( mach_break_cond) && !WIFSTOPPED (w))
652,653d660
< #ifdef MACH
< #else MACH
656d662
< #endif MACH
663a670,675
> 	  if ( MACH_BREAK( mach_break_cond))
> 	    stop_signal = SIGTRAP;
> 
> #ifdef DEBUG
> 	  fprintf( stderr, "infrun: stop_signal = %d\n", stop_signal);
> #endif DEBUG
