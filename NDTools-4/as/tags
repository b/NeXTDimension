ABSL		m68k.c	/^#define ABSL	12/ ;" macro 1 { m68_ip m68k_ip_op }	{ }
ABSOLUTE_PREFIX		i386.h	/^#define ABSOLUTE_PREFIX '*'/ ;" macro 1 { i386_operand }	{ }
AC		pmmu.h	/^#define AC	(SCC+1)		\/* 55 *\// ;" macro 1 { BAD m68_ip m68k_reg_parse }	{ SCC }
ADDR		m68k.c	/^#define ADDR	(DATA+8)	\/*   9-16 == address regs 0-/ ;" macro 1 { FPREG SP m68_ip m68k_ip_op m68k_reg_parse try_index }	{ DATA }
ADD_REG		m68k.c	/^#define ADD_REG(x)	{     if(x==FPI) cur_regs|=(1<</ ;" macro 1 { get_regs }	{ FPC FPI FPS }
ADEC		m68k.c	/^#define ADEC	5/ ;" macro 1 { m68_ip m68k_ip_op }	{ }
AFTER_SIZE		input-scrub.c	/^#define AFTER_SIZE  (1)/ ;" macro 1 { input_scrub_begin input_scrub_next_buffer }	{ }
AFTER_STRING		input-scrub.c	/^#define AFTER_STRING (" ")	\/* bcopy of 0 chars mig/ ;" macro 1 { input_scrub_begin input_scrub_next_buffer }	{ }
AINC		m68k.c	/^#define AINC	6/ ;" macro 1 { m68_ip m68k_ip_op }	{ }
AINDR		m68k.c	/^#define AINDR	4/ ;" macro 1 { m68_ip m68k_ip_op }	{ }
AINDX		m68k.c	/^#define AINDX	8/ ;" macro 1 { m68_ip m68k_ip_op }	{ }
AMIND		m68k.c	/^#define AMIND	10/ ;" macro 1 { m68_ip m68k_ip_op }	{ }
AOFF		m68k.c	/^#define AOFF	7/ ;" macro 1 { m68_ip m68k_ip_op }	{ }
AP		vax.c	/^#define AP (12)/ ;" macro 1 { vax_reg_parse }	{ }
APODX		m68k.c	/^#define APODX	9/ ;" macro 1 { m68_ip m68k_ip_op }	{ }
APRDX		m68k.c	/^#define APRDX	11/ ;" macro 1 { m68_ip m68k_ip_op }	{ }
AREG		m68k.c	/^#define AREG	3/ ;" macro 1 { m68_ip m68k_ip_op }	{ }
ARG_LEN		ns32k-opcode.h	/^#define ARG_LEN 50/ ;" macro 1 { }	{ }
ASSERT		as.h	/^#define ASSERT	assert/ ;" macro 1 { SKIP_WHITESPACE know }	{ }
Abs		i386.h	/^#define Abs (Abs8|Abs16|Abs32)/ ;" macro 1 { SMALLEST_DISP_TYPE i386_operand pi }	{ Abs16 Abs32 Abs8 }
Abs16		i386.h	/^#define Abs16 0x10000000/ ;" macro 1 { Abs SMALLEST_DISP_TYPE md_assemble }	{ }
Abs32		i386.h	/^#define Abs32 0x20000000/ ;" macro 1 { Abs SMALLEST_DISP_TYPE }	{ }
Abs8		i386.h	/^#define Abs8  0x08000000/ ;" macro 1 { Abs md_assemble }	{ }
Acc		i386.h	/^#define Acc     0x2000000		\/* Accumulator %al or %/ ;" macro 1 { ImplicitRegister }	{ }
BAC		pmmu.h	/^#define BAC	(BAD+8)		\/* 64,65,66,67, 68,69,70,71 */ ;" macro 1 { PSR m68_ip m68k_reg_parse }	{ BAD }
BAD		pmmu.h	/^#define BAD	(AC+1)		\/* 56,57,58,59, 60,61,62,63 *\// ;" macro 1 { BAC m68_ip m68k_reg_parse }	{ AC }
BAD_CASE		as.h	/^#define BAD_CASE(value)							\\/ ;" macro 1 { clean_up_expression cons expr fixup_segment md_assemble md_convert_frag md_number_to_chars md_number_to_disp md_number_to_field md_number_to_imm pseudo_set relax_segment stab write_object_file }	{ as_fatal value }
BB		vax.c	/^#define BB (1+-128)/ ;" macro 1 { }	{ }
BEFORE_SIZE		input-scrub.c	/^#define BEFORE_SIZE (1)/ ;" macro 1 { input_scrub_begin input_scrub_new_file input_scrub_next_buffer }	{ }
BEFORE_STRING		input-scrub.c	/^#define BEFORE_STRING ("\\n")/ ;" macro 1 { input_scrub_begin }	{ }
BF		vax.c	/^#define BF (1+ 127)/ ;" macro 1 { }	{ }
BIGNUM_BEGIN_SIZE		read.c	/^#define BIGNUM_BEGIN_SIZE (16)/ ;" macro 1 { read_begin }	{ }
BITS_PER_CHAR		bignum.h	/^#define BITS_PER_CHAR			(8)/ ;" macro 1 { big_cons cons md_chars_to_number md_number_to_chars md_number_to_disp md_number_to_field md_number_to_imm }	{ }
BLOCK_NUMBER_LIMIT		gdb-blocks.c	/^#define BLOCK_NUMBER_LIMIT (1 << (LOG_2_Z0 + LOG_2/ ;" macro 1 { find }	{ LOG_2_Z0 LOG_2_Z1 LOG_2_Z2 }
BRANCH		m68k.c	/^#define BRANCH		1/ ;" macro 1 { convert_iif encode_operand m68_ip md_convert_frag md_estimate_size_before_relax }	{ }
BSD_FILL_SIZE_CROCK_4		read.c	/^#define BSD_FILL_SIZE_CROCK_4 (4)/ ;" macro 1 { s_fill }	{ }
BSD_FILL_SIZE_CROCK_8		read.c	/^#define BSD_FILL_SIZE_CROCK_8 (8)/ ;" macro 1 { s_fill }	{ }
BUFFER_SIZE		input-file.c	/^#define BUFFER_SIZE (32 * 1024)/ ;" macro 1 { input_file_buffer_size input_file_give_next_buffer input_file_open }	{ }
BYTE		i386.c	/^#define BYTE 0/ ;" macro 1 { SIZE_FROM_RELAX_STATE encode_operand md_assemble md_convert_frag md_estimate_size_before_relax }	{ }
BYTE_OPCODE_SUFFIX		i386.h	/^#define BYTE_OPCODE_SUFFIX  'b'/ ;" macro 1 { OPCODE_SUFFIX_TO_TYPE i386_operand md_assemble }	{ }
BaseIndex		i386.h	/^#define BaseIndex 0x8000/ ;" macro 1 { ByteMem MATCH Mem WordMem i386_operand md_assemble }	{ }
Byte		i386.h	/^#define Byte (Reg8|Imm8)/ ;" macro 1 { OPCODE_SUFFIX_TO_TYPE }	{ Imm8 Reg8 }
ByteMem		i386.h	/^#define ByteMem   (Mem8|Disp|BaseIndex)/ ;" macro 1 { }	{ BaseIndex Disp Mem8 }
C		vax.c	/^#define C(a,b) ENCODE_RELAX(a,b)/ ;" macro 1 { }	{ ENCODE_RELAX }
CAAR		m68k.c	/^#define CAAR	(VBR+1)		\/*  43 *\// ;" macro 1 { MSP m68_ip m68k_reg_parse }	{ VBR }
CACR		m68k.c	/^#define CACR	(DFC+1)		\/*  41 *\// ;" macro 1 { VBR m68_ip m68k_reg_parse }	{ DFC }
CAL		pmmu.h	/^#define CAL	(CRP+1)		\/* 52 *\// ;" macro 1 { VAL m68_ip m68k_reg_parse }	{ CRP }
CALL_FAR_IMMEDIATE		i386-opcode.h	/^#define CALL_FAR_IMMEDIATE 0x9a/ ;" macro 1 { }	{ }
CALL_PC_RELATIVE		i386-opcode.h	/^#define CALL_PC_RELATIVE 0xe8/ ;" macro 1 { }	{ }
CCR		m68k.c	/^#define CCR	(SR+1)		\/*  36 Condition code Reg *\// ;" macro 1 { USP m68_ip m68k_reg_parse }	{ SR }
CHARS_PER_LITTLENUM		bignum.h	/^#define CHARS_PER_LITTLENUM		(1 << LITTLENUM_SHIFT/ ;" macro 1 { }	{ LITTLENUM_SHIFT }
COMMON		as.c	/^#define COMMON/ ;" macro 1 { }	{ }
COND_JUMP		i386.c	/^#define COND_JUMP 1		\/* conditional jump *\// ;" macro 1 { md_assemble md_convert_frag }	{ }
CONSISTENT_REGISTER_MATCH		i386.c	/^#define CONSISTENT_REGISTER_MATCH(m0, m1, t0, t1) / ;" macro 1 { md_assemble }	{ Reg }
CONST		strstr.c	/^#define CONST/ ;" macro 1 { strstr strstrn }	{ }
COPNUM		m68k.c	/^#define COPNUM	(FPREG+8)	\/*  25-32 Co-processor #1/ ;" macro 1 { PC m68_ip }	{ FPREG }
COPYING_UNIT		obstack.c	/^#define COPYING_UNIT int/ ;" macro 1 { _obstack_newchunk }	{ }
CRP		pmmu.h	/^#define CRP	(SRP+1)		\/* 51 *\// ;" macro 1 { CAL m68_ip m68k_reg_parse }	{ SRP }
Close_VMS_Object_File		vms.c	/^Close_VMS_Object_File()/ ;" function 4 { VMS_write_object_file }	{ VMS_Object_File_FD }
Control		i386.h	/^#define Control 0x40000		\/* Control register *\// ;" macro 1 { md_assemble }	{ }
Create_VMS_Object_File		vms.c	/^Create_VMS_Object_File()/ ;" function 23 { VMS_write_object_file }	{ Current_Object_Record_Type Object_Record_Offset VMS_Object_File_FD out_file_name }
Current_Object_Record_Type		vms.c	/^static int Current_Object_Record_Type;	\/* Type of / ;" global 1 { Create_VMS_Object_File Set_VMS_Object_File_Record }	{ }
DATA		m68k.c	/^#define DATA	1		\/*   1- 8 == data registers 0-7 *\// ;" macro 1 { ADDR get_regs m68_ip m68k_ip_op m68k_reg_parse try_index }	{ }
DEFAULT		ns32k.c	/^#define DEFAULT	-1				\/* addr_mode returns this va/ ;" macro 1 { addr_mode }	{ }
DEFAULT_ALIGNMENT		obstack.c	/^#define DEFAULT_ALIGNMENT ((char *)&((struct fooal/ ;" macro 1 { _obstack_begin }	{ fooalign }
DEFAULT_ROUNDING		obstack.c	/^#define DEFAULT_ROUNDING (sizeof (union fooround))/ ;" macro 1 { _obstack_begin }	{ fooround }
DELETED		hash.c	/^#define DELETED     ((char *)1)	\/* guarenteed inva/ ;" macro 1 { hash_ask hash_delete hash_grow islive }	{ }
DFC		m68k.c	/^#define DFC	(SFC+1)		\/*  40 *\// ;" macro 1 { CACR m68_ip m68k_reg_parse }	{ SFC }
DISPLENP		vax.c	/^#define DISPLENP(c)	(vip_displen_metacharacter   [/ ;" macro 1 { vip_op }	{ vip_displen_metacharacter }
DOUBLE		ns32k.c	/^#define DOUBLE		2/ ;" macro 1 { md_convert_frag }	{ }
DREG		m68k.c	/^#define DREG	2/ ;" macro 1 { m68_ip m68k_ip_op }	{ }
DRP		pmmu.h	/^#define DRP	(TC+1)		\/* 49 *\// ;" macro 1 { SRP m68_ip m68k_reg_parse }	{ TC }
DST$C_		objrecdef.h	/^#define	DST$C_C		7		\/* Language == "C"	*\// ;" macro 1 { VMS_TBT_Module_Begin }	{ }
DST$C_DELTA_PC_		objrecdef.h	/^#define	DST$C_DELTA_PC_W	1		\/* Incr PC	*\// ;" macro 1 { VMS_TBT_Line_PC_Correlation }	{ }
DST$C_INCR_LINU		objrecdef.h	/^#define	DST$C_INCR_LINUM	2		\/* Incr Line #	*\// ;" macro 1 { VMS_TBT_Line_PC_Correlation }	{ }
DST$C_INCR_LINUM_		objrecdef.h	/^#define	DST$C_INCR_LINUM_W	3		\/* Incr Line #	*\// ;" macro 1 { VMS_TBT_Line_PC_Correlation }	{ }
DST$C_LINE_NU		objrecdef.h	/^#define	DST$C_LINE_NUM	185		\/* Line Number		*\// ;" macro 1 { VMS_TBT_Line_PC_Correlation }	{ }
DST$C_MODBE		objrecdef.h	/^#define	DST$C_MODBEG	188		\/* Beginning of module	*/ ;" macro 1 { VMS_TBT_Module_Begin }	{ }
DST$C_MODEN		objrecdef.h	/^#define	DST$C_MODEND	189		\/* End of module	*\// ;" macro 1 { VMS_TBT_Module_End }	{ }
DST$C_RTNBE		objrecdef.h	/^#define	DST$C_RTNBEG	190		\/* Beginning of routine	/ ;" macro 1 { VMS_TBT_Routine_Begin }	{ }
DST$C_RTNEN		objrecdef.h	/^#define	DST$C_RTNEND	191		\/* End of routine	*\// ;" macro 1 { VMS_TBT_Routine_End }	{ }
DST$C_SET_ABS_P		objrecdef.h	/^#define	DST$C_SET_ABS_PC	16		\/* Set PC	*\// ;" macro 1 { VMS_TBT_Line_PC_Correlation }	{ }
DST$C_SET_LINE_NU		objrecdef.h	/^#define	DST$C_SET_LINE_NUM	9		\/* Set Line #	*\// ;" macro 1 { VMS_TBT_Line_PC_Correlation }	{ }
DST$C_SOURC		objrecdef.h	/^#define	DST$C_SOURCE	155		\/* Source file		*\// ;" macro 1 { VMS_TBT_Source_File VMS_TBT_Source_Lines }	{ }
DST$C_SRC_DECLFIL		objrecdef.h	/^#define	DST$C_SRC_DECLFILE	1		\/* Declare file	*\// ;" macro 1 { VMS_TBT_Source_File }	{ }
DST$C_SRC_DEFLINES_		objrecdef.h	/^#define	DST$C_SRC_DEFLINES_W	10		\/* # of line	*\// ;" macro 1 { VMS_TBT_Source_Lines }	{ }
DST$C_SRC_FORMFEE		objrecdef.h	/^#define	DST$C_SRC_FORMFEED	16		\/* ^L counts	*\// ;" macro 1 { VMS_TBT_Source_File }	{ }
DST$C_SRC_SETFIL		objrecdef.h	/^#define	DST$C_SRC_SETFILE	2		\/* Set file	*\// ;" macro 1 { VMS_TBT_Source_File }	{ }
DST$C_SRC_SETREC_		objrecdef.h	/^#define	DST$C_SRC_SETREC_L	3		\/* Set record	*\// ;" macro 1 { VMS_TBT_Source_File }	{ }
DST$C_TERM_		objrecdef.h	/^#define	DST$C_TERM_L		21		\/* End of lines	*\// ;" macro 1 { VMS_TBT_Line_PC_Correlation }	{ }
DUAL_INSN_MODE_BIT		i860-opcode.h	/^#define DUAL_INSN_MODE_BIT	0x00000200/ ;" macro 1 { i860_ip }	{ }
DWORD		i386.c	/^#define DWORD 2/ ;" macro 1 { md_convert_frag }	{ }
DWORD_OPCODE_SUFFIX		i386.h	/^#define DWORD_OPCODE_SUFFIX 'l'/ ;" macro 1 { i386_operand md_assemble }	{ }
DWord		i386.h	/^#define DWord (Reg32|Imm32)/ ;" macro 1 { OPCODE_SUFFIX_TO_TYPE }	{ Imm32 Reg32 }
Debug		i386.h	/^#define Debug   0x80000		\/* Debug register *\// ;" macro 1 { md_assemble }	{ }
Disp		i386.h	/^#define Disp    (Disp8|Disp16|Disp32) \/* General d/ ;" macro 1 { ByteMem Mem SMALLEST_DISP_TYPE WordMem i386_operand md_assemble pi }	{ Disp16 Disp32 Disp8 }
Disp16		i386.h	/^#define Disp16  0x400		\/* 16 bit displacement *\// ;" macro 1 { Disp SMALLEST_DISP_TYPE md_assemble }	{ }
Disp32		i386.h	/^#define Disp32  0x800		\/* 32 bit displacement *\// ;" macro 1 { Disp DispUnknown MODE_FROM_DISP_SIZE SMALLEST_DISP_TYPE i386_operand md_assemble }	{ }
Disp8		i386.h	/^#define Disp8   0x200		\/* 8 bit displacement (for / ;" macro 1 { Disp MODE_FROM_DISP_SIZE md_assemble }	{ }
DispUnknown		i386.h	/^#define DispUnknown Disp32	\/* for unknown size dis/ ;" macro 1 { }	{ Disp32 }
EBP_REG_NUM		i386.h	/^#define EBP_REG_NUM 5/ ;" macro 1 { NO_BASE_REGISTER md_assemble }	{ }
ENCODE_RELAX		vax.c	/^#define ENCODE_RELAX(what,length) (((what) << 2) +/ ;" macro 1 { C md_assemble md_convert_frag md_estimate_size_before_relax }	{ what }
ENCODE_RELAX_STATE		i386.c	/^#define ENCODE_RELAX_STATE(type,size) ((type<<2) |/ ;" macro 1 { md_assemble md_convert_frag }	{ size }
END_OF_INSN		i386.h	/^#define END_OF_INSN '\\0'/ ;" macro 1 { md_assemble }	{ }
END_STRING_AND_SAVE		i386.c	/^#define END_STRING_AND_SAVE(s)      *save_stack_p+/ ;" macro 1 { i386_operand md_assemble }	{ save_stack_p }
ERROR_EXPONENT_OVERFLOW		flonum.h	/^#define ERROR_EXPONENT_OVERFLOW (2)/ ;" macro 1 { atof_generic operand }	{ }
ESCAPE_TO_TWO_BYTE_ADDRESSING		i386.h	/^#define ESCAPE_TO_TWO_BYTE_ADDRESSING ESP_REG_NUM/ ;" macro 1 { md_assemble }	{ ESP_REG_NUM }
ESP_REG_NUM		i386.h	/^#define ESP_REG_NUM 4/ ;" macro 1 { ESCAPE_TO_TWO_BYTE_ADDRESSING NO_INDEX_REGISTER md_assemble }	{ }
EXEC_MACHINE_TYPE		write.c	/^#define EXEC_MACHINE_TYPE (0x20C)/ ;" macro 1 { write_object_file }	{ }
EXP_CHARS		i386.c	/^char EXP_CHARS[] = "eE";/ ;" global 1 { operand }	{ }
Entry_Point_Symbol		vms.c	/^static symbolS *Entry_Point_Symbol = 0;	\/* Pointer/ ;" global 1 { VMS_Check_For_Main VMS_write_object_file }	{ }
FAIL		m68k.c	/^#define FAIL	0/ ;" macro 1 { crack_operand get_regs m68_ip m68k_ip_op m68k_reg_parse try_index }	{ }
FALSE		as.h	/^#define FALSE	(0)/ ;" macro 1 { TRUE atof_generic hash_ask i386_operand i860_ip md_assemble perform_an_assembly_pass stab vip_op }	{ }
FBRANCH		m68k.c	/^#define FBRANCH		2/ ;" macro 1 { m68_ip md_convert_frag md_estimate_size_before_relax }	{ }
FITS_IN_SIGNED_BYTE		i386.h	/^#define FITS_IN_SIGNED_BYTE(num) ((num) >= -128 &&/ ;" macro 1 { SMALLEST_DISP_TYPE SMALLEST_IMM_TYPE md_assemble }	{ }
FITS_IN_SIGNED_WORD		i386.h	/^#define FITS_IN_SIGNED_WORD(num) ((num) >= -32768 / ;" macro 1 { SMALLEST_DISP_TYPE SMALLEST_IMM_TYPE md_assemble }	{ }
FITS_IN_UNSIGNED_BYTE		i386.h	/^#define FITS_IN_UNSIGNED_BYTE(num) ((num) >= 0 && / ;" macro 1 { md_assemble }	{ }
FITS_IN_UNSIGNED_WORD		i386.h	/^#define FITS_IN_UNSIGNED_WORD(num) ((num) >= 0 && / ;" macro 1 { md_assemble }	{ }
FLONUM_STRUCT		flonum.h	/^struct FLONUM_STRUCT/ ;" struct 10 { }	{ }
FLONUM_TYPE		flonum.h	/^typedef struct FLONUM_STRUCT FLONUM_TYPE;/ ;" typedef 1 { atof_generic md_assemble md_begin }	{ }
FLT_CHARS		i386.c	/^char FLT_CHARS[] = "fFdDxX";/ ;" global 1 { operand }	{ }
FP		vax.c	/^#define FP (13)/ ;" macro 1 { vax_reg_parse }	{ }
FPC		m68k.c	/^#define FPC	(FPS+1)		\/* 47 *\// ;" macro 1 { ADD_REG get_regs m68_ip m68k_reg_parse }	{ FPS }
FPI		m68k.c	/^#define FPI	(MSP+1)		\/* 45 *\// ;" macro 1 { ADD_REG FPS get_regs m68_ip m68k_reg_parse }	{ MSP }
FPREG		m68k.c	/^#define FPREG	(ADDR+8)	\/*  17-24 Eight FP register/ ;" macro 1 { COPNUM get_regs m68_ip m68k_reg_parse }	{ ADDR }
FPS		m68k.c	/^#define FPS	(FPI+1)		\/* 46 *\// ;" macro 1 { ADD_REG FPC TC get_regs m68_ip m68k_reg_parse }	{ FPI }
FRAG_APPEND_1_CHAR		frags.h	/^#define FRAG_APPEND_1_CHAR(datum)	\\/ ;" macro 1 { md_assemble stringer }	{ frag_new frag_now frag_wane frags obstack_1grow obstack_room }
FloatAcc		i386.h	/^#define FloatAcc 0x400000	\/* Float stack top %st(0/ ;" macro 1 { ImplicitRegister }	{ }
FloatReg		i386.h	/^#define FloatReg 0x200000	\/* Float register *\// ;" macro 1 { md_assemble }	{ }
Flush_VMS_Object_Record_Buffer		vms.c	/^Flush_VMS_Object_Record_Buffer()/ ;" function 21 { Set_VMS_Object_File_Record VMS_Global_Symbol_Spec VMS_Procedure_Entry_Pt VMS_Psect_Spec VMS_Set_Psect VMS_Store_Immediate_Data VMS_Store_PIC_Symbol_Reference VMS_Store_Repeated_Data Write_VMS_EOM_Record Write_VMS_MHD_Records }	{ Object_Record_Buffer Object_Record_Offset VMS_Object_File_FD i }
GET_RD		i860-opcode.h	/^#define GET_RD(op)	(((op) >> 16) & 0x1F)/ ;" macro 1 { }	{ }
GET_RS1		i860-opcode.h	/^#define GET_RS1(op)	(((op) >> 11) & 0x1F)/ ;" macro 1 { }	{ }
GET_RS2		i860-opcode.h	/^#define GET_RS2(op)	(((op) >> 21) & 0x1F)/ ;" macro 1 { }	{ }
GPS$C_NAM		objrecdef.h	/^#define	GPS$C_NAME	9/ ;" macro 1 { }	{ }
GPS$K_NAM		objrecdef.h	/^#define	GPS$K_NAME	9/ ;" macro 1 { }	{ }
GPS$M_EX		objrecdef.h	/^#define	GPS$M_EXE	64/ ;" macro 1 { VMS_Modify_Psect_Attributes VMS_Psect_Spec }	{ }
GPS$M_GB		objrecdef.h	/^#define	GPS$M_GBL	16/ ;" macro 1 { VMS_Modify_Psect_Attributes VMS_Psect_Spec }	{ }
GPS$M_LI		objrecdef.h	/^#define	GPS$M_LIB	2/ ;" macro 1 { VMS_Modify_Psect_Attributes }	{ }
GPS$M_OV		objrecdef.h	/^#define	GPS$M_OVR	4/ ;" macro 1 { VMS_Modify_Psect_Attributes VMS_Psect_Spec }	{ }
GPS$M_PI		objrecdef.h	/^#define	GPS$M_PIC	1/ ;" macro 1 { VMS_Modify_Psect_Attributes VMS_Psect_Spec }	{ }
GPS$M_R		objrecdef.h	/^#define	GPS$M_RD	128/ ;" macro 1 { VMS_Modify_Psect_Attributes VMS_Psect_Spec }	{ }
GPS$M_RE		objrecdef.h	/^#define	GPS$M_REL	8/ ;" macro 1 { VMS_Modify_Psect_Attributes VMS_Psect_Spec }	{ }
GPS$M_SH		objrecdef.h	/^#define	GPS$M_SHR	32/ ;" macro 1 { VMS_Modify_Psect_Attributes VMS_Psect_Spec }	{ }
GPS$M_VE		objrecdef.h	/^#define	GPS$M_VEC	512/ ;" macro 1 { VMS_Modify_Psect_Attributes }	{ }
GPS$M_WR		objrecdef.h	/^#define	GPS$M_WRT	256/ ;" macro 1 { VMS_Modify_Psect_Attributes VMS_Psect_Spec }	{ }
GSD$C_EN		objrecdef.h	/^#define	GSD$C_ENV	8/ ;" macro 1 { }	{ }
GSD$C_ENTRIE		objrecdef.h	/^#define	GSD$C_ENTRIES	1/ ;" macro 1 { }	{ }
GSD$C_EP		objrecdef.h	/^#define	GSD$C_EPM	2/ ;" macro 1 { VMS_Procedure_Entry_Pt }	{ }
GSD$C_EPM		objrecdef.h	/^#define	GSD$C_EPMW	5/ ;" macro 1 { VMS_Procedure_Entry_Pt }	{ }
GSD$C_ID		objrecdef.h	/^#define	GSD$C_IDC	7/ ;" macro 1 { }	{ }
GSD$C_LEP		objrecdef.h	/^#define	GSD$C_LEPM	10/ ;" macro 1 { }	{ }
GSD$C_LPR		objrecdef.h	/^#define	GSD$C_LPRO	11/ ;" macro 1 { }	{ }
GSD$C_LS		objrecdef.h	/^#define	GSD$C_LSY	9/ ;" macro 1 { }	{ }
GSD$C_MAXRECTY		objrecdef.h	/^#define	GSD$C_MAXRECTYP	15/ ;" macro 1 { }	{ }
GSD$C_PR		objrecdef.h	/^#define	GSD$C_PRO	3/ ;" macro 1 { }	{ }
GSD$C_PRO		objrecdef.h	/^#define	GSD$C_PROW	6/ ;" macro 1 { }	{ }
GSD$C_PS		objrecdef.h	/^#define	GSD$C_PSC	0/ ;" macro 1 { VMS_Psect_Spec }	{ }
GSD$C_SPS		objrecdef.h	/^#define	GSD$C_SPSC	12/ ;" macro 1 { }	{ }
GSD$C_SY		objrecdef.h	/^#define	GSD$C_SYM	1/ ;" macro 1 { VMS_Global_Symbol_Spec }	{ }
GSD$C_SYM		objrecdef.h	/^#define	GSD$C_SYMW	4/ ;" macro 1 { VMS_Global_Symbol_Spec }	{ }
GSD$K_ENTRIE		objrecdef.h	/^#define	GSD$K_ENTRIES	1/ ;" macro 1 { }	{ }
GSY$M_DE		objrecdef.h	/^#define	GSY$M_DEF	2/ ;" macro 1 { VMS_Global_Symbol_Spec VMS_Procedure_Entry_Pt }	{ }
GSY$M_RE		objrecdef.h	/^#define	GSY$M_REL	8/ ;" macro 1 { VMS_Global_Symbol_Spec VMS_Procedure_Entry_Pt }	{ }
GSY$M_UN		objrecdef.h	/^#define	GSY$M_UNI	4/ ;" macro 1 { }	{ }
GSY$M_WEA		objrecdef.h	/^#define	GSY$M_WEAK	1/ ;" macro 1 { }	{ }
HASH_STATLENGTH		hash.h	/^#define HASH_STATLENGTH	(6)/ ;" macro 1 { }	{ }
HAS_PSECT_ATTRIBUTES		vms.c	/^#define	HAS_PSECT_ATTRIBUTES(Name) \\/ ;" macro 1 { VMS_Case_Hack_Symbol VMS_Modify_Psect_Attributes VMS_Psect_Spec }	{ PSECT_ATTRIBUTES_STRING PSECT_ATTRIBUTES_STRING_LENGTH }
I860_errors		i860.c	/^static int I860_errors;/ ;" global 1 { i860_ip md_begin md_end }	{ }
IIF		ns32k.c	/^#define IIF(ptr,a1,c1,e1,g1,i1,k1,m1,o1,q1,s1,u1) / ;" macro 1 { encode_operand parse }	{ addr_mode iif size }
IIF_ENTRIES		ns32k.c	/^#define IIF_ENTRIES 13				\/* number of entries in / ;" macro 1 { convert_iif parse }	{ }
IMMED		m68k.c	/^#define IMMED	1/ ;" macro 1 { m68_ip m68k_ip_op }	{ }
IMMEDIATEP		vax.c	/^#define IMMEDIATEP(c)	(vip_immediate_metacharacter/ ;" macro 1 { vip_op }	{ vip_immediate_metacharacter }
IMMEDIATE_PREFIX		i386.h	/^#define IMMEDIATE_PREFIX '$'/ ;" macro 1 { i386_operand }	{ }
IND		ns32k.c	/^#define IND(x,y)	(((x)<<2)+(y))/ ;" macro 1 { convert_iif encode_operand md_convert_frag md_estimate_size_before_relax }	{ }
INDIRECTP		vax.c	/^#define INDIRECTP(c)	(vip_indirect_metacharacter  / ;" macro 1 { vip_op }	{ vip_indirect_metacharacter }
INSERT_NOP		i860.c	/^#define INSERT_NOP	0x00000001/ ;" macro 1 { md_assemble }	{ }
ISP		m68k.c	/^#define ISP	(USP+1)		\/*  38 Interrupt stack pointe/ ;" macro 1 { SFC m68_ip m68k_reg_parse }	{ USP }
IS_COMMENT		app.c	/^#define IS_COMMENT(c)			(lex [c] & LEX_IS_COMMENT_/ ;" macro 1 { do_scrub_next_char }	{ LEX_IS_COMMENT_START lex }
IS_JUMP_ON_CX_ZERO		i386-opcode.h	/^#define IS_JUMP_ON_CX_ZERO(o) \\/ ;" macro 1 { }	{ o }
IS_JUMP_ON_ECX_ZERO		i386-opcode.h	/^#define IS_JUMP_ON_ECX_ZERO(o) \\/ ;" macro 1 { }	{ o }
IS_LINE_COMMENT		app.c	/^#define IS_LINE_COMMENT(c)		(lex [c] & LEX_IS_LINE/ ;" macro 1 { do_scrub_next_char }	{ LEX_IS_LINE_COMMENT_START lex }
IS_LINE_SEPERATOR		app.c	/^#define IS_LINE_SEPERATOR(c)		(lex [c] & LEX_IS_LI/ ;" macro 1 { do_scrub_next_char }	{ LEX_IS_LINE_SEPERATOR lex }
IS_LOGOP		i860-opcode.h	/^#define IS_LOGOP(x)	(((x)&LOGOP_MASK) == LOGOP_MAS/ ;" macro 1 { i860_ip }	{ LOGOP_MASK }
IS_LOOP_ECX_TIMES		i386-opcode.h	/^#define IS_LOOP_ECX_TIMES(o) \\/ ;" macro 1 { }	{ o }
IS_STRING_INSTRUCTION		i386-opcode.h	/^#define IS_STRING_INSTRUCTION(o) \\/ ;" macro 1 { md_assemble }	{ o }
IS_SYMBOL_COMPONENT		app.c	/^#define IS_SYMBOL_COMPONENT(c)		(lex [c] & LEX_IS_/ ;" macro 1 { }	{ LEX_IS_SYMBOL_COMPONENT lex }
IS_WHITESPACE		app.c	/^#define IS_WHITESPACE(c)		(lex [c] & LEX_IS_WHITES/ ;" macro 1 { do_scrub_next_char }	{ LEX_IS_WHITESPACE lex }
Imm		i386.h	/^#define Imm     (Imm8|Imm16|Imm32)    \/* gen'l imm/ ;" macro 1 { i386_operand pi }	{ Imm16 Imm32 Imm8 }
Imm1		i386.h	/^#define Imm1    0x40    	\/* 1 bit immediate *\// ;" macro 1 { SMALLEST_IMM_TYPE md_assemble }	{ }
Imm16		i386.h	/^#define Imm16   0x10		\/* 16 bit immediate *\// ;" macro 1 { Imm SMALLEST_IMM_TYPE Word md_assemble }	{ }
Imm32		i386.h	/^#define Imm32   0x20		\/* 32 bit immediate *\// ;" macro 1 { DWord Imm ImmUnknown SMALLEST_IMM_TYPE i386_operand md_assemble }	{ }
Imm8		i386.h	/^#define Imm8    0x8		\/* 8 bit immediate *\// ;" macro 1 { Byte Imm SMALLEST_IMM_TYPE md_assemble }	{ }
ImmUnknown		i386.h	/^#define ImmUnknown Imm32	\/* for unknown expression/ ;" macro 1 { }	{ Imm32 }
ImplicitRegister		i386.h	/^#define ImplicitRegister (InOutPortReg|ShiftCount|/ ;" macro 1 { md_assemble }	{ Acc FloatAcc InOutPortReg ShiftCount }
InOutPortReg		i386.h	/^#define InOutPortReg 0x10000	\/* register to hold i/ ;" macro 1 { ImplicitRegister }	{ }
JUMP_FAR_IMMEDIATE		i386-opcode.h	/^#define JUMP_FAR_IMMEDIATE 0xea/ ;" macro 1 { }	{ }
JUMP_PC_RELATIVE		i386-opcode.h	/^#define JUMP_PC_RELATIVE 0xeb/ ;" macro 1 { md_assemble md_estimate_size_before_relax }	{ }
JumpAbsolute		i386.h	/^#define JumpAbsolute 0x4000000/ ;" macro 1 { MATCH i386_operand }	{ }
LEX_BEGIN_NAME		read.h	/^#define LEX_BEGIN_NAME	(2)	\/* may begin a name *\/	/ ;" macro 1 { is_name_beginner }	{ }
LEX_IS_COMMENT_START		app.c	/^#define LEX_IS_COMMENT_START		(8)	\/* JF added thes/ ;" macro 1 { IS_COMMENT do_scrub_begin }	{ }
LEX_IS_LINE_COMMENT_START		app.c	/^#define LEX_IS_LINE_COMMENT_START	(16)/ ;" macro 1 { IS_LINE_COMMENT do_scrub_begin }	{ }
LEX_IS_LINE_SEPERATOR		app.c	/^#define LEX_IS_LINE_SEPERATOR		(4)/ ;" macro 1 { IS_LINE_SEPERATOR do_scrub_begin }	{ }
LEX_IS_SYMBOL_COMPONENT		app.c	/^#define LEX_IS_SYMBOL_COMPONENT		(1)/ ;" macro 1 { IS_SYMBOL_COMPONENT do_scrub_begin }	{ }
LEX_IS_WHITESPACE		app.c	/^#define LEX_IS_WHITESPACE		(2)/ ;" macro 1 { IS_WHITESPACE do_scrub_begin }	{ }
LEX_NAME		read.h	/^#define	LEX_NAME	(1)	\/* may continue a name *\/		  / ;" macro 1 { is_part_of_name }	{ }
LITTLENUM_MASK		bignum.h	/^#define	LITTLENUM_MASK			(0xFFFF)/ ;" macro 1 { atof_generic flonum_multip md_assemble operand }	{ }
LITTLENUM_NUMBER_OF_BITS		bignum.h	/^#define	LITTLENUM_NUMBER_OF_BITS	(16)/ ;" macro 1 { LITTLENUM_RADIX atof_generic flonum_multip md_assemble operand }	{ }
LITTLENUM_RADIX		bignum.h	/^#define	LITTLENUM_RADIX			(1 << LITTLENUM_NUMBER_O/ ;" macro 1 { }	{ LITTLENUM_NUMBER_OF_BITS }
LITTLENUM_SHIFT		bignum.h	/^#define LITTLENUM_SHIFT			(1)/ ;" macro 1 { CHARS_PER_LITTLENUM bignum_copy }	{ }
LITTLENUM_TYPE		bignum.h	/^typedef unsigned short int	LITTLENUM_TYPE;/ ;" typedef 1 { atof_generic bignum_copy convert_iif flonum_copy flonum_multip get_num m68_ip md_assemble md_atof operand }	{ }
LOGOP_MASK		i860-opcode.h	/^#define LOGOP_MASK	0xC0000000/ ;" macro 1 { IS_LOGOP }	{ }
LOG_2_Z0		gdb-blocks.c	/^#define LOG_2_Z0 (8)		\/* How many bits are in Z0 p/ ;" macro 1 { BLOCK_NUMBER_LIMIT find }	{ }
LOG_2_Z1		gdb-blocks.c	/^#define LOG_2_Z1 (8)		\/* How many bits are in Z1 p/ ;" macro 1 { BLOCK_NUMBER_LIMIT find }	{ }
LOG_2_Z2		gdb-blocks.c	/^#define LOG_2_Z2 (8)		\/* How many bits are in Z2 p/ ;" macro 1 { BLOCK_NUMBER_LIMIT }	{ }
LOG_TO_BASE_2_OF_10		bignum.h	/^#define	LOG_TO_BASE_2_OF_10		(3.321928 \/* 09488736/ ;" macro 1 { atof_generic }	{ }
LONG		m68k.c	/^#define LONG		2/ ;" macro 1 { m68_ip md_convert_frag md_estimate_size_before_relax }	{ }
MASK_BITS		ns32k.c	/^#define MASK_BITS 31/ ;" macro 1 { }	{ }
MASK_CHAR		read.c	/^#define MASK_CHAR (0xFF)	\/* If your chars aren't 8/ ;" macro 1 { big_cons }	{ }
MATCH		i386.c	/^#define MATCH(overlap,given_type) \\/ ;" macro 1 { md_assemble }	{ BaseIndex JumpAbsolute }
MAXIMUM_NUMBER_OF_CHARS_FOR_FLOAT		read.c	/^#define MAXIMUM_NUMBER_OF_CHARS_FOR_FLOAT (16)/ ;" macro 1 { float_cons }	{ }
MAXMANTISSA		atof-m68k.c	/^#define MAXMANTISSA 17/ ;" macro 1 { atof_m68k }	{ }
MAX_ALIGNMENT		i860.c	/^#define MAX_ALIGNMENT (1 << 15)/ ;" macro 1 { s_align s_i860_align }	{ }
MAX_ARGS		ns32k-opcode.h	/^#define MAX_ARGS 4/ ;" macro 1 { }	{ }
MAX_IMMEDIATE_OPERANDS		i386.h	/^#define MAX_IMMEDIATE_OPERANDS 2 \/* max immediates/ ;" macro 1 { i386_operand }	{ }
MAX_LINES_PER_VECTOR		gdb-lines.c	/^#define MAX_LINES_PER_VECTOR 50		\/* lpv *\// ;" macro 1 { add_vector gdb_line }	{ }
MAX_LITTLENUMS		i386.c	/^#define MAX_LITTLENUMS 6/ ;" macro 1 { }	{ }
MAX_MEMORY_OPERANDS		i386.h	/^#define MAX_MEMORY_OPERANDS 1	\/* max memory ref pe/ ;" macro 1 { i386_operand }	{ }
MAX_OPERANDS		i386.h	/^#define MAX_OPERANDS 3		\/* max operands per insn */ ;" macro 1 { md_assemble }	{ }
MAX_PREFIXES		i386.h	/^#define MAX_PREFIXES 4		\/* max prefixes per opcode/ ;" macro 1 { md_assemble }	{ }
MAX_REG_NAME_SIZE		i386-opcode.h	/^#define MAX_REG_NAME_SIZE 8	\/* for parsing registe/ ;" macro 1 { parse_register }	{ }
MHD$C_CP		objrecdef.h	/^#define	MHD$C_CPR	4/ ;" macro 1 { }	{ }
MHD$C_GT		objrecdef.h	/^#define	MHD$C_GTX	6/ ;" macro 1 { }	{ }
MHD$C_LN		objrecdef.h	/^#define	MHD$C_LNM	1/ ;" macro 1 { Write_VMS_MHD_Records }	{ }
MHD$C_MAXHDRTY		objrecdef.h	/^#define	MHD$C_MAXHDRTYP	6/ ;" macro 1 { }	{ }
MHD$C_MH		objrecdef.h	/^#define	MHD$C_MHD	0/ ;" macro 1 { Write_VMS_MHD_Records }	{ }
MHD$C_MT		objrecdef.h	/^#define	MHD$C_MTC	5/ ;" macro 1 { }	{ }
MHD$C_SR		objrecdef.h	/^#define	MHD$C_SRC	2/ ;" macro 1 { }	{ }
MHD$C_TT		objrecdef.h	/^#define	MHD$C_TTL	3/ ;" macro 1 { }	{ }
MODE_FROM_DISP_SIZE		i386.h	/^#define MODE_FROM_DISP_SIZE(t) \\/ ;" macro 1 { md_assemble }	{ Disp32 Disp8 }
MSCR		m68k.c	/^#define MSCR	13/ ;" macro 1 { m68_ip m68k_ip_op }	{ }
MSP		m68k.c	/^#define MSP	(CAAR+1)	\/*  44 *\// ;" macro 1 { FPI m68_ip m68k_reg_parse }	{ CAAR }
M_GENERIC		m-generic.h	/^#define M_GENERIC 1/ ;" macro 1 { }	{ }
M_NeXT		m68k.h	/^#define M_NeXT	1/ ;" macro 1 { }	{ }
M_SUN		m-sun3.h	/^#define M_SUN	1/ ;" macro 1 { }	{ }
Mapp		app.c	/^main()/ ;" function 8 { }	{ do_scrub_next_char }
Mas		as.c	/^main(argc,argv)/ ;" function 214 { }	{ NULL TRUE as_warn bzero compiler_version_string flagseen gdb_begin gdb_symbol_file_name input_scrub_begin input_scrub_end md_begin md_end myname out_file_name perform_an_assembly_pass read_begin seen_at_least_1_file stralloc subsegs_begin symbol_begin version_string write_object_file }
Mem		i386.h	/^#define Mem     (Disp|Mem8|Mem16|Mem32|BaseIndex) / ;" macro 1 { md_assemble }	{ BaseIndex Disp Mem16 Mem32 Mem8 }
Mem16		i386.h	/^#define Mem16   0x2000/ ;" macro 1 { Mem WordMem i386_operand }	{ }
Mem32		i386.h	/^#define Mem32   0x4000/ ;" macro 1 { Mem WordMem i386_operand }	{ }
Mem8		i386.h	/^#define Mem8    0x1000/ ;" macro 1 { ByteMem Mem i386_operand }	{ }
Mhash		hash.c	/^main()/ ;" function 99 { }	{ STATBUFSIZE TABLES answer applicatee command destroy h hash_apply hash_control hash_delete hash_die hash_find hash_insert hash_jam hash_new hash_replace hash_say hashtable name number p pp statbuf value what whattable }
Mm68k		m68k.c	/^main()/ ;" function 22 { }	{ bzero m68k_ip_op m68k_op }
Mvax		vax.c	/^main()/ ;" function 72 { }	{ answer my_displen my_immediate my_indirect mybug mycount mysynth myvit myvop p vip vip_begin vip_end }
NAN		atof-m68k.c	/^#define NAN 0/ ;" macro 1 { }	{ }
NDEBUG		as.h	/^#define NDEBUG		\/* JF disable asserts *\// ;" macro 1 { }	{ }
NO_BASE_REGISTER		i386.h	/^#define NO_BASE_REGISTER EBP_REG_NUM/ ;" macro 1 { md_assemble }	{ EBP_REG_NUM }
NO_INDEX_REGISTER		i386.h	/^#define NO_INDEX_REGISTER ESP_REG_NUM/ ;" macro 1 { md_assemble }	{ ESP_REG_NUM }
NS32032		ns32k.c	/^#define NS32032/ ;" macro 1 { }	{ }
NULL		strstr.c	/^#define	NULL	0/ ;" macro 1 { Mas a_out_to_mach_O addr_mode applicatee clean_up_expression cons demand_copy_string destroy encode_operand expr expr_part fixup_segment frag_new gdb_file_size get_known_segmented_expression get_objc_section_bounds hash_apply hash_delete hash_find hash_grow hash_new hash_replace i860_ip input_scrub_begin m68_ip md_assemble md_begin operand output_file_close perform_an_assembly_pass read_a_source_file s_line seen_at_least_1_file stab strstr strstrn subseg_new subsegs_begin symbol_begin symbol_find_or_make symbol_new write_object_file }	{ }
NUMOPCODES		i860-opcode.h	/^#define NUMOPCODES ((sizeof i860_opcodes)\/(sizeof / ;" macro 1 { md_begin }	{ i860_opcodes }
N_TYPE_seg		subsegs.c	/^segT N_TYPE_seg [N_TYPE+2] =	\/* N_TYPE == 0x1E = 3/ ;" global 15 { expr_part operand }	{ }
OBJ$C_DB		objrecdef.h	/^#define	OBJ$C_DBG	4/ ;" macro 1 { }	{ }
OBJ$C_EO		objrecdef.h	/^#define	OBJ$C_EOM	3/ ;" macro 1 { Write_VMS_EOM_Record }	{ }
OBJ$C_EOM		objrecdef.h	/^#define	OBJ$C_EOMW	7/ ;" macro 1 { }	{ }
OBJ$C_GS		objrecdef.h	/^#define	OBJ$C_GSD	1/ ;" macro 1 { VMS_Global_Symbol_Spec VMS_Procedure_Entry_Pt VMS_Psect_Spec }	{ }
OBJ$C_GSD_EN		objrecdef.h	/^#define	OBJ$C_GSD_ENV	8/ ;" macro 1 { }	{ }
OBJ$C_GSD_EP		objrecdef.h	/^#define	OBJ$C_GSD_EPM	2/ ;" macro 1 { }	{ }
OBJ$C_GSD_EPM		objrecdef.h	/^#define	OBJ$C_GSD_EPMW	5/ ;" macro 1 { }	{ }
OBJ$C_GSD_ID		objrecdef.h	/^#define	OBJ$C_GSD_IDC	7/ ;" macro 1 { }	{ }
OBJ$C_GSD_LEP		objrecdef.h	/^#define	OBJ$C_GSD_LEPM	10/ ;" macro 1 { }	{ }
OBJ$C_GSD_LPR		objrecdef.h	/^#define	OBJ$C_GSD_LPRO	11/ ;" macro 1 { }	{ }
OBJ$C_GSD_LS		objrecdef.h	/^#define	OBJ$C_GSD_LSY	9/ ;" macro 1 { }	{ }
OBJ$C_GSD_PR		objrecdef.h	/^#define	OBJ$C_GSD_PRO	3/ ;" macro 1 { }	{ }
OBJ$C_GSD_PRO		objrecdef.h	/^#define	OBJ$C_GSD_PROW	6/ ;" macro 1 { }	{ }
OBJ$C_GSD_PS		objrecdef.h	/^#define	OBJ$C_GSD_PSC	0/ ;" macro 1 { }	{ }
OBJ$C_GSD_SPS		objrecdef.h	/^#define	OBJ$C_GSD_SPSC	12/ ;" macro 1 { }	{ }
OBJ$C_GSD_SY		objrecdef.h	/^#define	OBJ$C_GSD_SYM	1/ ;" macro 1 { }	{ }
OBJ$C_GSD_SYM		objrecdef.h	/^#define	OBJ$C_GSD_SYMW	4/ ;" macro 1 { }	{ }
OBJ$C_HD		objrecdef.h	/^#define	OBJ$C_HDR	0/ ;" macro 1 { Write_VMS_MHD_Records }	{ }
OBJ$C_HDR_CP		objrecdef.h	/^#define	OBJ$C_HDR_CPR	4/ ;" macro 1 { }	{ }
OBJ$C_HDR_GT		objrecdef.h	/^#define	OBJ$C_HDR_GTX	6/ ;" macro 1 { }	{ }
OBJ$C_HDR_LN		objrecdef.h	/^#define	OBJ$C_HDR_LNM	1/ ;" macro 1 { }	{ }
OBJ$C_HDR_MH		objrecdef.h	/^#define	OBJ$C_HDR_MHD	0/ ;" macro 1 { }	{ }
OBJ$C_HDR_MT		objrecdef.h	/^#define	OBJ$C_HDR_MTC	5/ ;" macro 1 { }	{ }
OBJ$C_HDR_SR		objrecdef.h	/^#define	OBJ$C_HDR_SRC	2/ ;" macro 1 { }	{ }
OBJ$C_HDR_TT		objrecdef.h	/^#define	OBJ$C_HDR_TTL	3/ ;" macro 1 { }	{ }
OBJ$C_LN		objrecdef.h	/^#define	OBJ$C_LNK	6/ ;" macro 1 { }	{ }
OBJ$C_MAXRECSI		objrecdef.h	/^#define	OBJ$C_MAXRECSIZ	2048/ ;" macro 1 { }	{ }
OBJ$C_MAXRECTY		objrecdef.h	/^#define	OBJ$C_MAXRECTYP	7/ ;" macro 1 { }	{ }
OBJ$C_PSCALILI		objrecdef.h	/^#define	OBJ$C_PSCALILIM	9/ ;" macro 1 { }	{ }
OBJ$C_STOREPLI		objrecdef.h	/^#define	OBJ$C_STOREPLIM	-1/ ;" macro 1 { }	{ }
OBJ$C_STRLV		objrecdef.h	/^#define	OBJ$C_STRLVL	0/ ;" macro 1 { Write_VMS_MHD_Records }	{ }
OBJ$C_SUBTY		objrecdef.h	/^#define	OBJ$C_SUBTYP	1/ ;" macro 1 { }	{ }
OBJ$C_SYMSI		objrecdef.h	/^#define	OBJ$C_SYMSIZ	31/ ;" macro 1 { }	{ }
OBJ$C_TB		objrecdef.h	/^#define	OBJ$C_TBT	5/ ;" macro 1 { VMS_TBT_Line_PC_Correlation VMS_TBT_Module_Begin VMS_TBT_Module_End VMS_TBT_Routine_Begin VMS_TBT_Routine_End VMS_TBT_Source_File VMS_TBT_Source_Lines }	{ }
OBJ$C_TI		objrecdef.h	/^#define	OBJ$C_TIR	2/ ;" macro 1 { VMS_Fix_Indirect_Reference VMS_write_object_file }	{ }
OBJ$K_SUBTY		objrecdef.h	/^#define	OBJ$K_SUBTYP	1/ ;" macro 1 { }	{ }
OBJC_MOD		atom.c	/^#define OBJC_MOD "__OBJC_MODULES"/ ;" macro 1 { get_objc_section_bounds }	{ }
OBJC_SEL		atom.c	/^#define OBJC_SEL "__OBJC_STRINGS"/ ;" macro 1 { get_objc_section_bounds }	{ }
OBJC_SYM		atom.c	/^#define OBJC_SYM "__OBJC_SYMBOLS"/ ;" macro 1 { get_objc_section_bounds }	{ }
OBJREC		objrecdef.h	/^struct OBJREC {/ ;" struct 7 { }	{ }
OK		m68k.c	/^#define OK	1/ ;" macro 1 { get_regs m68k_ip_op try_index }	{ }
OPCODE_SUFFIX_TO_TYPE		i386.h	/^#define OPCODE_SUFFIX_TO_TYPE(s)                 \\/ ;" macro 1 { }	{ BYTE_OPCODE_SUFFIX Byte DWord WORD_OPCODE_SUFFIX Word }
OP_FNOP		i860-opcode.h	/^#define OP_FNOP		0xB0000000/ ;" macro 1 { i860_ip }	{ }
OP_NOP		i860-opcode.h	/^#define OP_NOP		0xA0000000/ ;" macro 1 { i860_ip md_assemble s_i860_align }	{ }
OP_PREFIX_MASK		i860-opcode.h	/^#define OP_PREFIX_MASK	0xFC000000/ ;" macro 1 { i860_ip }	{ }
Object_Record_Buffer		vms.c	/^static char Object_Record_Buffer[512];	\/* Buffer f/ ;" global 1 { Flush_VMS_Object_Record_Buffer PUT_CHAR PUT_LONG PUT_SHORT VMS_Global_Symbol_Spec VMS_Procedure_Entry_Pt VMS_Psect_Spec VMS_Set_Psect VMS_Store_Immediate_Data VMS_Store_PIC_Symbol_Reference VMS_Store_Repeated_Data Write_VMS_MHD_Records }	{ }
Object_Record_Offset		vms.c	/^static int Object_Record_Offset;	\/* Offset to end / ;" global 1 { Create_VMS_Object_File Flush_VMS_Object_Record_Buffer PUT_CHAR PUT_LONG PUT_SHORT VMS_Global_Symbol_Spec VMS_Procedure_Entry_Pt VMS_Psect_Spec VMS_Set_Psect VMS_Store_Immediate_Data VMS_Store_PIC_Symbol_Reference VMS_Store_Repeated_Data VMS_TBT_Line_PC_Correlation VMS_TBT_Routine_Begin }	{ }
PC		m68k.c	/^#define PC	(COPNUM+8)	\/*  33 Program counter *\// ;" macro 1 { ZPC m68_ip m68k_ip_op m68k_reg_parse vax_reg_parse vip_op }	{ COPNUM }
PCREL		m68k.c	/^#define PCREL		3/ ;" macro 1 { m68_ip md_convert_frag md_estimate_size_before_relax }	{ }
PCSR		pmmu.h	/^#define PCSR	(PSR+1)		\/* 73 *\// ;" macro 1 { m68_ip m68k_reg_parse }	{ PSR }
PERMIT_WHITESPACE		read.h	/^#define PERMIT_WHITESPACE	\/* Define to make whites/ ;" macro 1 { }	{ }
POINTER		obstack.c	/^#define POINTER void */ ;" macro 1 { _obstack_free }	{ }
POP_SEG_SHORT		i386-opcode.h	/^#define POP_SEG_SHORT 0x7/ ;" macro 1 { md_assemble }	{ }
PREFIX_FPU		i860-opcode.h	/^#define PREFIX_FPU	0x48000000/ ;" macro 1 { i860_ip }	{ }
PREFIX_SEPERATOR		i386.h	/^#define PREFIX_SEPERATOR '\/'/ ;" macro 1 { md_assemble md_begin }	{ }
PREPROCESSOR		input-file.c	/^#define PREPROCESSOR ".\/app"/ ;" macro 1 { input_file_open }	{ }
PRIVATE_SIZE		ns32k.c	/^#define PRIVATE_SIZE 256			\/* size of my garbage m/ ;" macro 1 { md_begin }	{ }
PSECT_ATTRIBUTES_STRING		vms.c	/^#define	PSECT_ATTRIBUTES_STRING		"$$PsectAttribute/ ;" macro 1 { HAS_PSECT_ATTRIBUTES }	{ }
PSECT_ATTRIBUTES_STRING_LENGTH		vms.c	/^#define	PSECT_ATTRIBUTES_STRING_LENGTH	18/ ;" macro 1 { HAS_PSECT_ATTRIBUTES VMS_Case_Hack_Symbol VMS_Modify_Psect_Attributes }	{ }
PSR		pmmu.h	/^#define PSR	(BAC+8)		\/* 72 *\// ;" macro 1 { PCSR m68_ip m68k_reg_parse }	{ BAC }
PUT_CHAR		vms.c	/^#define	PUT_CHAR(val)	Object_Record_Buffer[Object_/ ;" macro 1 { PUT_COUNTED_STRING VMS_Global_Symbol_Spec VMS_Procedure_Entry_Pt VMS_Psect_Spec VMS_Set_Psect VMS_Store_Immediate_Data VMS_Store_PIC_Symbol_Reference VMS_Store_Repeated_Data VMS_TBT_Line_PC_Correlation VMS_TBT_Routine_Begin Write_VMS_EOM_Record Write_VMS_MHD_Records }	{ Object_Record_Buffer Object_Record_Offset }
PUT_COUNTED_STRING		vms.c	/^#define	PUT_COUNTED_STRING(cp) {\\/ ;" macro 1 { VMS_Global_Symbol_Spec VMS_Procedure_Entry_Pt VMS_Psect_Spec VMS_Store_PIC_Symbol_Reference Write_VMS_MHD_Records }	{ PUT_CHAR p register }
PUT_LONG		vms.c	/^#define	PUT_LONG(val)	*((long *)(Object_Record_Buf/ ;" macro 1 { VMS_Global_Symbol_Spec VMS_Procedure_Entry_Pt VMS_Psect_Spec VMS_Set_Psect VMS_Store_PIC_Symbol_Reference VMS_Store_Repeated_Data VMS_TBT_Line_PC_Correlation VMS_TBT_Routine_Begin Write_VMS_EOM_Record }	{ Object_Record_Buffer Object_Record_Offset }
PUT_SHORT		vms.c	/^#define	PUT_SHORT(val)	*((short *)(Object_Record_B/ ;" macro 1 { VMS_Global_Symbol_Spec VMS_Procedure_Entry_Pt VMS_Psect_Spec VMS_Set_Psect VMS_Store_PIC_Symbol_Reference VMS_TBT_Line_PC_Correlation VMS_TBT_Routine_Begin Write_VMS_MHD_Records }	{ Object_Record_Buffer Object_Record_Offset }
REGISTER_PREFIX		i386.h	/^#define REGISTER_PREFIX '%'/ ;" macro 1 { i386_operand }	{ }
REGLST		m68k.c	/^#define REGLST	14/ ;" macro 1 { m68_ip m68k_ip_op }	{ }
REGMEM_FIELD_HAS_MEM		i386.h	/^#define REGMEM_FIELD_HAS_MEM (~REGMEM_FIELD_HAS_RE/ ;" macro 1 { }	{ REGMEM_FIELD_HAS_REG }
REGMEM_FIELD_HAS_REG		i386.h	/^#define REGMEM_FIELD_HAS_REG 0x3                \/*/ ;" macro 1 { REGMEM_FIELD_HAS_MEM }	{ }
REPE		i386-opcode.h	/^#define REPE  0xf3/ ;" macro 1 { md_assemble }	{ }
REPNE		i386-opcode.h	/^#define REPNE 0xf2/ ;" macro 1 { md_assemble }	{ }
RESTORE_END_STRING		i386.c	/^#define RESTORE_END_STRING(s)       *s = *--save_s/ ;" macro 1 { i386_operand md_assemble }	{ save_stack_p }
Reg		i386.h	/^#define Reg     (Reg8|Reg16|Reg32)    \/* gen'l reg/ ;" macro 1 { CONSISTENT_REGISTER_MATCH i386_operand md_assemble pi }	{ Reg16 Reg32 Reg8 }
Reg16		i386.h	/^#define Reg16   0x2		\/* 16 bit reg *\// ;" macro 1 { Reg Word WordReg }	{ }
Reg32		i386.h	/^#define Reg32   0x4		\/* 32 bit reg *\// ;" macro 1 { DWord Reg WordReg i386_operand }	{ }
Reg8		i386.h	/^#define Reg8    0x1		\/* 8 bit reg *\// ;" macro 1 { Byte Reg }	{ }
SCC		pmmu.h	/^#define SCC	(VAL+1)		\/* 54 *\// ;" macro 1 { AC m68_ip m68k_reg_parse }	{ VAL }
SEG_MAXIMUM_ORDINAL		as.h	/^#define SEG_MAXIMUM_ORDINAL (SEG_DIFFERENCE)/ ;" macro 1 { subsegs_begin }	{ }
SET_RD		i860-opcode.h	/^#define SET_RD(op, rval)	(op)=(((op) & ~(0x1F << 1/ ;" macro 1 { i860_ip }	{ }
SET_RS1		i860-opcode.h	/^#define SET_RS1(op, rval)	(op)=(((op) & ~(0x1F << / ;" macro 1 { i860_ip }	{ }
SET_RS2		i860-opcode.h	/^#define SET_RS2(op, rval)	(op)=(((op) & ~(0x1F << / ;" macro 1 { i860_ip }	{ }
SFC		m68k.c	/^#define SFC	(ISP+1)		\/*  39 *\// ;" macro 1 { DFC m68_ip m68k_reg_parse }	{ ISP }
SHORT		m68k.c	/^#define SHORT		1/ ;" macro 1 { m68_ip md_convert_frag md_estimate_size_before_relax }	{ }
SIZEOF_STRUCT_FRAG		as.h	/^#define SIZEOF_STRUCT_FRAG \\/ ;" macro 1 { frag_new subseg_new subsegs_begin }	{ zero_address_frag }
SIZET		strstr.c	/^#define SIZET int/ ;" macro 1 { strstr strstrn }	{ }
SIZE_FROM_RELAX_STATE		i386.c	/^#define SIZE_FROM_RELAX_STATE(s) \\/ ;" macro 1 { md_convert_frag }	{ BYTE WORD }
SIZE_OF_LARGE_NUMBER		expr.h	/^#define SIZE_OF_LARGE_NUMBER (20)	\/* Number of lit/ ;" macro 1 { md_assemble operand }	{ }
SKIPWHITE		atof-m68k.c	/^#define SKIPWHITE(s) while(*(s) == ' ' || *(s) == / ;" macro 1 { atof_m68k }	{ }
SKIP_W		m68k.c	/^#define SKIP_W()	{ ss++; if(*ss==' ') ss++;}/ ;" macro 1 { try_index }	{ ss }
SKIP_WHITE		m68k.c	/^#define SKIP_WHITE()	{ str++; if(*str==' ') str++;/ ;" macro 1 { }	{ }
SKIP_WHITESPACE		read.h	/^#define SKIP_WHITESPACE() {if (* input_line_pointe/ ;" macro 1 { big_cons demand_copy_string demand_empty_rest_of_line float_cons is_it_end_of_statement operand read_a_source_file s_comm s_desc s_gdbsym s_globl s_lcomm s_lsym s_set stab stringer }	{ input_line_pointer }
SMALLEST_DISP_TYPE		i386.h	/^#define SMALLEST_DISP_TYPE(num) \\/ ;" macro 1 { i386_operand }	{ Abs Abs16 Abs32 Disp Disp16 Disp32 FITS_IN_SIGNED_BYTE FITS_IN_SIGNED_WORD }
SMALLEST_IMM_TYPE		i386.h	/^#define SMALLEST_IMM_TYPE(num) \\/ ;" macro 1 { i386_operand }	{ FITS_IN_SIGNED_BYTE FITS_IN_SIGNED_WORD Imm1 Imm16 Imm32 Imm8 }
SP		m68k.c	/^#define	SP	ADDR+7/ ;" macro 1 { vax_reg_parse }	{ ADDR }
SPECIAL_CASE_SET		i860.c	/^#define SPECIAL_CASE_SET    1/ ;" macro 1 { }	{ }
SR		m68k.c	/^#define SR	(ZPC+1)		\/*  35 Status Reg *\// ;" macro 1 { CCR m68_ip m68k_reg_parse }	{ ZPC }
SRP		pmmu.h	/^#define SRP	(DRP+1)		\/* 50 *\// ;" macro 1 { CRP m68_ip m68k_reg_parse }	{ DRP }
SReg2		i386.h	/^#define SReg2   0x800000		\/* 2 bit segment registe/ ;" macro 1 { i386_operand md_assemble }	{ }
SReg3		i386.h	/^#define SReg3   0x1000000		\/* 3 bit segment regist/ ;" macro 1 { i386_operand md_assemble }	{ }
START_FULL		hash.c	/^#define START_FULL  (4)/ ;" macro 1 { }	{ }
START_POWER		hash.c	/^#define START_POWER    (11)	\/* power of two: size / ;" macro 1 { hash_new }	{ }
START_SIZE		hash.c	/^#define START_SIZE  (8)/ ;" macro 1 { }	{ }
STATBUFSIZE		hash.c	/^#define STATBUFSIZE (12)	\/* we can have 12 statist/ ;" macro 1 { Mhash }	{ }
STATE_ALWAYS_BRANCH		vax.c	/^#define STATE_ALWAYS_BRANCH		(3) \/* includes BSB../ ;" macro 1 { md_assemble md_convert_frag md_estimate_size_before_relax }	{ }
STATE_BYTE		vax.c	/^#define STATE_BYTE			(0)/ ;" macro 1 { md_assemble md_convert_frag md_estimate_size_before_relax }	{ }
STATE_COMPLEX_BRANCH		vax.c	/^#define STATE_COMPLEX_BRANCH	        (4)/ ;" macro 1 { md_assemble md_convert_frag md_estimate_size_before_relax }	{ }
STATE_COMPLEX_HOP		vax.c	/^#define STATE_COMPLEX_HOP		(5)/ ;" macro 1 { md_assemble md_convert_frag md_estimate_size_before_relax }	{ }
STATE_CONDITIONAL_BRANCH		vax.c	/^#define STATE_CONDITIONAL_BRANCH	(2)/ ;" macro 1 { md_assemble md_convert_frag md_estimate_size_before_relax }	{ }
STATE_LONG		vax.c	/^#define STATE_LONG			(2)/ ;" macro 1 { md_convert_frag }	{ }
STATE_PC_RELATIVE		vax.c	/^#define STATE_PC_RELATIVE		(1)/ ;" macro 1 { md_assemble md_convert_frag md_estimate_size_before_relax }	{ }
STATE_UNDF		vax.c	/^#define STATE_UNDF			(3) \/* Symbol undefined in pa/ ;" macro 1 { md_assemble md_estimate_size_before_relax }	{ }
STATE_WORD		vax.c	/^#define STATE_WORD			(1)/ ;" macro 1 { md_assemble md_convert_frag md_estimate_size_before_relax }	{ }
STATLENGTH		hash.c	/^#define STATLENGTH     (6)	\/* size of statistics b/ ;" macro 1 { hash_new hash_say }	{ }
STAT_ACCESS		hash.c	/^#define STAT_ACCESS    (1)	\/* number of hash_ask()/ ;" macro 1 { }	{ }
STAT_COLLIDE		hash.c	/^#define STAT_COLLIDE   (3)	\/* number of collisions/ ;" macro 1 { }	{ }
STAT_SIZE		hash.c	/^#define STAT_SIZE      (0)      \/* number of slots/ ;" macro 1 { }	{ }
STAT_USED		hash.c	/^#define STAT_USED      (5)	\/* slots used right now/ ;" macro 1 { }	{ }
STAT__READ		hash.c	/^#define STAT__READ     (0)      \/* reading *\// ;" macro 1 { hash_find }	{ }
STAT__WRITE		hash.c	/^#define STAT__WRITE    (1)      \/* writing *\// ;" macro 1 { hash_delete hash_insert hash_jam hash_replace }	{ }
SUB_SEGMENT_ALIGN		write.c	/^#define SUB_SEGMENT_ALIGN (2)/ ;" macro 1 { write_object_file }	{ }
SUSPECT		gdb.c	/^#define SUSPECT		\/* JF *\// ;" macro 1 { }	{ }
SYMBOL_TYPE		i386.c	/^#define SYMBOL_TYPE(t) \\/ ;" macro 1 { ps }	{ }
SYM_GROUP		gdb-symbols.c	/^#define SYM_GROUP (100)		\/* We allocate storage in/ ;" macro 1 { gdb_symbols_emit new_sfg }	{ }
SZ_UNDEF		m68k.c	/^#define SZ_UNDEF	3/ ;" macro 1 { m68_ip md_estimate_size_before_relax }	{ }
Set_VMS_Object_File_Record		vms.c	/^Set_VMS_Object_File_Record(Type)/ ;" function 16 { VMS_Global_Symbol_Spec VMS_Procedure_Entry_Pt VMS_Psect_Spec VMS_Set_Psect VMS_Store_Immediate_Data VMS_Store_PIC_Symbol_Reference VMS_Store_Repeated_Data Write_VMS_EOM_Record Write_VMS_MHD_Records }	{ Current_Object_Record_Type Flush_VMS_Object_Record_Buffer }
ShiftCount		i386.h	/^#define ShiftCount 0x20000	\/* register to hold shi/ ;" macro 1 { ImplicitRegister }	{ }
TAB		m68k.c	/^#define TAB(x,y)	(((x)<<2)+(y))/ ;" macro 1 { m68_ip md_convert_frag md_estimate_size_before_relax }	{ }
TABLES		hash.c	/^#define TABLES (6)		\/* number of hash tables to ma/ ;" macro 1 { Mhash whattable }	{ }
TC		pmmu.h	/^#define TC	(FPS+1)		\/* 48 *\// ;" macro 1 { DRP m68_ip m68k_reg_parse }	{ FPS }
TIR$C_CTL_AUGR		objrecdef.h	/^#define	TIR$C_CTL_AUGRB	81/ ;" macro 1 { }	{ }
TIR$C_CTL_DFLO		objrecdef.h	/^#define	TIR$C_CTL_DFLOC	82/ ;" macro 1 { }	{ }
TIR$C_CTL_SETR		objrecdef.h	/^#define	TIR$C_CTL_SETRB	80/ ;" macro 1 { VMS_Set_Psect }	{ }
TIR$C_CTL_STKD		objrecdef.h	/^#define	TIR$C_CTL_STKDL	84/ ;" macro 1 { }	{ }
TIR$C_CTL_STLO		objrecdef.h	/^#define	TIR$C_CTL_STLOC	83/ ;" macro 1 { }	{ }
TIR$C_MAXCTLCO		objrecdef.h	/^#define	TIR$C_MAXCTLCOD	84/ ;" macro 1 { }	{ }
TIR$C_MAXOPRCO		objrecdef.h	/^#define	TIR$C_MAXOPRCOD	66/ ;" macro 1 { }	{ }
TIR$C_MAXSTACO		objrecdef.h	/^#define	TIR$C_MAXSTACOD	19/ ;" macro 1 { }	{ }
TIR$C_MAXSTOCO		objrecdef.h	/^#define	TIR$C_MAXSTOCOD	42/ ;" macro 1 { }	{ }
TIR$C_MINCTLCO		objrecdef.h	/^#define	TIR$C_MINCTLCOD	80/ ;" macro 1 { }	{ }
TIR$C_MINOPRCO		objrecdef.h	/^#define	TIR$C_MINOPRCOD	50/ ;" macro 1 { }	{ }
TIR$C_MINSTOCO		objrecdef.h	/^#define	TIR$C_MINSTOCOD	20/ ;" macro 1 { }	{ }
TIR$C_OPR_AD		objrecdef.h	/^#define	TIR$C_OPR_ADD	51/ ;" macro 1 { VMS_Store_PIC_Symbol_Reference }	{ }
TIR$C_OPR_AN		objrecdef.h	/^#define	TIR$C_OPR_AND	55/ ;" macro 1 { }	{ }
TIR$C_OPR_AS		objrecdef.h	/^#define	TIR$C_OPR_ASH	61/ ;" macro 1 { }	{ }
TIR$C_OPR_CO		objrecdef.h	/^#define	TIR$C_OPR_COM	59/ ;" macro 1 { }	{ }
TIR$C_OPR_DFLI		objrecdef.h	/^#define	TIR$C_OPR_DFLIT	66/ ;" macro 1 { }	{ }
TIR$C_OPR_DI		objrecdef.h	/^#define	TIR$C_OPR_DIV	54/ ;" macro 1 { }	{ }
TIR$C_OPR_EO		objrecdef.h	/^#define	TIR$C_OPR_EOR	57/ ;" macro 1 { }	{ }
TIR$C_OPR_INS		objrecdef.h	/^#define	TIR$C_OPR_INSV	60/ ;" macro 1 { }	{ }
TIR$C_OPR_IO		objrecdef.h	/^#define	TIR$C_OPR_IOR	56/ ;" macro 1 { }	{ }
TIR$C_OPR_MU		objrecdef.h	/^#define	TIR$C_OPR_MUL	53/ ;" macro 1 { }	{ }
TIR$C_OPR_NE		objrecdef.h	/^#define	TIR$C_OPR_NEG	58/ ;" macro 1 { }	{ }
TIR$C_OPR_NO		objrecdef.h	/^#define	TIR$C_OPR_NOP	50/ ;" macro 1 { }	{ }
TIR$C_OPR_REDE		objrecdef.h	/^#define	TIR$C_OPR_REDEF	65/ ;" macro 1 { }	{ }
TIR$C_OPR_RO		objrecdef.h	/^#define	TIR$C_OPR_ROT	63/ ;" macro 1 { }	{ }
TIR$C_OPR_SE		objrecdef.h	/^#define	TIR$C_OPR_SEL	64/ ;" macro 1 { }	{ }
TIR$C_OPR_SU		objrecdef.h	/^#define	TIR$C_OPR_SUB	52/ ;" macro 1 { }	{ }
TIR$C_OPR_US		objrecdef.h	/^#define	TIR$C_OPR_USH	62/ ;" macro 1 { }	{ }
TIR$C_STA_BF		objrecdef.h	/^#define	TIR$C_STA_BFI	9/ ;" macro 1 { }	{ }
TIR$C_STA_CKAR		objrecdef.h	/^#define	TIR$C_STA_CKARG	13/ ;" macro 1 { }	{ }
TIR$C_STA_EP		objrecdef.h	/^#define	TIR$C_STA_EPM	12/ ;" macro 1 { }	{ }
TIR$C_STA_GB		objrecdef.h	/^#define	TIR$C_STA_GBL	0/ ;" macro 1 { VMS_Store_PIC_Symbol_Reference }	{ }
TIR$C_STA_L		objrecdef.h	/^#define	TIR$C_STA_LW	3/ ;" macro 1 { VMS_Store_PIC_Symbol_Reference VMS_Store_Repeated_Data }	{ }
TIR$C_STA_LEP		objrecdef.h	/^#define	TIR$C_STA_LEPM	19/ ;" macro 1 { }	{ }
TIR$C_STA_LF		objrecdef.h	/^#define	TIR$C_STA_LFI	11/ ;" macro 1 { }	{ }
TIR$C_STA_LI		objrecdef.h	/^#define	TIR$C_STA_LIT	18/ ;" macro 1 { }	{ }
TIR$C_STA_LS		objrecdef.h	/^#define	TIR$C_STA_LSY	17/ ;" macro 1 { }	{ }
TIR$C_STA_P		objrecdef.h	/^#define	TIR$C_STA_PB	4/ ;" macro 1 { VMS_Set_Psect VMS_Store_PIC_Symbol_Reference VMS_TBT_Line_PC_Correlation }	{ }
TIR$C_STA_S		objrecdef.h	/^#define	TIR$C_STA_SB	1/ ;" macro 1 { }	{ }
TIR$C_STA_U		objrecdef.h	/^#define	TIR$C_STA_UB	7/ ;" macro 1 { }	{ }
TIR$C_STA_WF		objrecdef.h	/^#define	TIR$C_STA_WFI	10/ ;" macro 1 { }	{ }
TIR$C_STA_WP		objrecdef.h	/^#define	TIR$C_STA_WPB	14/ ;" macro 1 { VMS_Set_Psect VMS_Store_PIC_Symbol_Reference VMS_TBT_Line_PC_Correlation VMS_TBT_Routine_Begin }	{ }
TIR$C_STO_		objrecdef.h	/^#define	TIR$C_STO_L	22/ ;" macro 1 { }	{ }
TIR$C_STO_B		objrecdef.h	/^#define	TIR$C_STO_BD	23/ ;" macro 1 { }	{ }
TIR$C_STO_L		objrecdef.h	/^#define	TIR$C_STO_LD	25/ ;" macro 1 { }	{ }
TIR$C_STO_PIC		objrecdef.h	/^#define	TIR$C_STO_PICR	28/ ;" macro 1 { VMS_Store_PIC_Symbol_Reference }	{ }
TIR$C_STO_PID		objrecdef.h	/^#define	TIR$C_STO_PIDR	27/ ;" macro 1 { VMS_Store_PIC_Symbol_Reference VMS_TBT_Line_PC_Correlation VMS_TBT_Routine_Begin }	{ }
TIR$C_STO_PIR		objrecdef.h	/^#define	TIR$C_STO_PIRR	42/ ;" macro 1 { }	{ }
TIR$C_STO_R		objrecdef.h	/^#define	TIR$C_STO_RL	31/ ;" macro 1 { }	{ }
TIR$C_STO_RIV		objrecdef.h	/^#define	TIR$C_STO_RIVB	41/ ;" macro 1 { VMS_Store_Repeated_Data }	{ }
TIR$C_STO_RS		objrecdef.h	/^#define	TIR$C_STO_RSB	29/ ;" macro 1 { }	{ }
TIR$C_STO_RU		objrecdef.h	/^#define	TIR$C_STO_RUB	35/ ;" macro 1 { }	{ }
TIR$C_STO_S		objrecdef.h	/^#define	TIR$C_STO_SB	20/ ;" macro 1 { }	{ }
TIR$C_STO_US		objrecdef.h	/^#define	TIR$C_STO_USB	33/ ;" macro 1 { }	{ }
TIR$C_STO_VP		objrecdef.h	/^#define	TIR$C_STO_VPS	32/ ;" macro 1 { }	{ }
TIR$C_STO_W		objrecdef.h	/^#define	TIR$C_STO_WD	24/ ;" macro 1 { }	{ }
TRUE		as.h	/^#define TRUE	(!FALSE)/ ;" macro 1 { Mas atof_generic expr hash_ask i386_operand i860_ip md_assemble md_begin operand pseudo_set stab vip_op vip_op_1 }	{ FALSE }
TWO_BYTE_OPCODE_ESCAPE		i386.h	/^#define TWO_BYTE_OPCODE_ESCAPE 0x0f/ ;" macro 1 { md_assemble md_convert_frag md_estimate_size_before_relax }	{ }
Test		i386.h	/^#define Test    0x100000		\/* Test register *\// ;" macro 1 { md_assemble }	{ }
UNCOND_JUMP		i386.c	/^#define UNCOND_JUMP 2		\/* unconditional jump *\// ;" macro 1 { md_assemble md_convert_frag }	{ }
UNDEF		ns32k.c	/^#define UNDEF           3/ ;" macro 1 { convert_iif md_estimate_size_before_relax }	{ }
UNKNOWN_SIZE		i386.c	/^#define UNKNOWN_SIZE 3/ ;" macro 1 { }	{ }
USP		m68k.c	/^#define USP	(CCR+1)		\/*  37 User Stack Pointer *\// ;" macro 1 { ISP m68_ip m68k_reg_parse }	{ CCR }
Unknown		i386.h	/^#define Unknown 0x0/ ;" macro 1 { pt }	{ }
VAL		pmmu.h	/^#define VAL	(CAL+1)		\/* 53 *\// ;" macro 1 { SCC m68_ip m68k_reg_parse }	{ CAL }
VAX_ABSOLUTE_MODE		vax-inst.h	/^#define VAX_ABSOLUTE_MODE (0x9F) \/* Use as @#...		/ ;" macro 1 { md_assemble }	{ }
VAX_BRB		vax-inst.h	/^#define VAX_BRB (0x11)		\/* Canonical branch.			   / ;" macro 1 { md_assemble md_convert_frag md_estimate_size_before_relax }	{ }
VAX_BRW		vax-inst.h	/^#define VAX_BRW (0x31)		\/* Another canonical branc/ ;" macro 1 { md_convert_frag }	{ }
VAX_JMP		vax-inst.h	/^#define VAX_JMP (0x17)		\/* Useful for branch optim/ ;" macro 1 { md_assemble md_convert_frag md_estimate_size_before_relax }	{ }
VAX_PC_RELATIVE_MODE		vax-inst.h	/^#define VAX_PC_RELATIVE_MODE (0xef) \/* Use it afte/ ;" macro 1 { md_assemble md_convert_frag md_estimate_size_before_relax }	{ }
VAX_WIDEN_LONG		vax-inst.h	/^#define VAX_WIDEN_LONG (0x6)	\/* Add this to byte b/ ;" macro 1 { md_assemble md_convert_frag md_estimate_size_before_relax }	{ }
VAX_WIDEN_WORD		vax-inst.h	/^#define VAX_WIDEN_WORD (0x20)	\/* Add this to byte / ;" macro 1 { md_convert_frag }	{ }
VAX_WIDTH_BYTE_JUMP		vax-inst.h	/^#define VAX_WIDTH_BYTE_JUMP	     ':' \/*           / ;" macro 1 { md_assemble }	{ }
VAX_WIDTH_CONDITIONAL_JUMP		vax-inst.h	/^#define VAX_WIDTH_CONDITIONAL_JUMP   '?' \/* vop_wi/ ;" macro 1 { md_assemble }	{ }
VAX_WIDTH_UNCONDITIONAL_JUMP		vax-inst.h	/^#define VAX_WIDTH_UNCONDITIONAL_JUMP '-' \/* These / ;" macro 1 { md_assemble }	{ }
VAX_WIDTH_WORD_JUMP		vax-inst.h	/^#define VAX_WIDTH_WORD_JUMP          '!' \/* and VI/ ;" macro 1 { md_assemble }	{ }
VBR		m68k.c	/^#define VBR	(CACR+1)	\/*  42 *\// ;" macro 1 { CAAR m68_ip m68k_reg_parse }	{ CACR }
VIT_MAX_OPERANDS		vax-inst.h	/^#define VIT_MAX_OPERANDS (6)	\/* maximum number of / ;" macro 1 { md_begin }	{ }
VIT_OPCODE_SPECIAL		vax-inst.h	/^#define VIT_OPCODE_SPECIAL   0x40000000	\/* Not nor/ ;" macro 1 { md_assemble }	{ }
VIT_OPCODE_SYNTHETIC		vax-inst.h	/^#define VIT_OPCODE_SYNTHETIC 0x80000000	\/* Not rea/ ;" macro 1 { md_assemble }	{ }
VMS_Case_Hack_Symbol		vms.c	/^VMS_Case_Hack_Symbol(In,Out)/ ;" function 94 { VMS_Global_Symbol_Spec VMS_Procedure_Entry_Pt VMS_Psect_Spec VMS_Store_PIC_Symbol_Reference }	{ HAS_PSECT_ATTRIBUTES PSECT_ATTRIBUTES_STRING_LENGTH i register }
VMS_Check_For_Main		vms.c	/^VMS_Check_For_Main()/ ;" function 187 { write_object_file }	{ Entry_Point_Symbol fix fragS frchain frchain_root i register symbol symbolS symbol_find symbol_rootP text_fix_root xmalloc }
VMS_Fix_Indirect_Reference		vms.c	/^VMS_Fix_Indirect_Reference(Text_Psect, Offset, fra/ ;" function 44 { VMS_write_object_file }	{ OBJ$C_TI VMS_Set_Psect VMS_Store_Immediate_Data text_frag_root }
VMS_Global_Symbol_Spec		vms.c	/^VMS_Global_Symbol_Spec(Name, Psect_Number, Psect_O/ ;" function 67 { VMS_write_object_file }	{ Flush_VMS_Object_Record_Buffer GSD$C_SY GSD$C_SYM GSY$M_DE GSY$M_RE OBJ$C_GS Object_Record_Buffer Object_Record_Offset PUT_CHAR PUT_COUNTED_STRING PUT_LONG PUT_SHORT Set_VMS_Object_File_Record VMS_Case_Hack_Symbol }
VMS_Initialized_Data_Size		vms.c	/^int VMS_Initialized_Data_Size(sp, End_Of_Data)/ ;" function 55 { VMS_write_object_file }	{ register symbol symbol_rootP }
VMS_Modify_Psect_Attributes		vms.c	/^VMS_Modify_Psect_Attributes(Name, Attribute_Pointe/ ;" function 92 { VMS_Psect_Spec }	{ GPS$M_EX GPS$M_GB GPS$M_LI GPS$M_OV GPS$M_PI GPS$M_R GPS$M_RE GPS$M_SH GPS$M_VE GPS$M_WR HAS_PSECT_ATTRIBUTES PSECT_ATTRIBUTES_STRING_LENGTH i register }
VMS_Object_File_FD		vms.c	/^static int VMS_Object_File_FD;		\/* File Descriptor/ ;" global 1 { Close_VMS_Object_File Create_VMS_Object_File Flush_VMS_Object_Record_Buffer }	{ }
VMS_Procedure_Entry_Pt		vms.c	/^VMS_Procedure_Entry_Pt(Name, Psect_Number, Psect_O/ ;" function 60 { VMS_write_object_file }	{ Flush_VMS_Object_Record_Buffer GSD$C_EP GSD$C_EPM GSY$M_DE GSY$M_RE OBJ$C_GS Object_Record_Buffer Object_Record_Offset PUT_CHAR PUT_COUNTED_STRING PUT_LONG PUT_SHORT Set_VMS_Object_File_Record VMS_Case_Hack_Symbol }
VMS_Psect_Spec		vms.c	/^VMS_Psect_Spec(Name, Size, Type)/ ;" function 81 { VMS_write_object_file }	{ Flush_VMS_Object_Record_Buffer GPS$M_EX GPS$M_GB GPS$M_OV GPS$M_PI GPS$M_R GPS$M_RE GPS$M_SH GPS$M_WR GSD$C_PS HAS_PSECT_ATTRIBUTES OBJ$C_GS Object_Record_Buffer Object_Record_Offset PUT_CHAR PUT_COUNTED_STRING PUT_LONG PUT_SHORT Set_VMS_Object_File_Record VMS_Case_Hack_Symbol VMS_Modify_Psect_Attributes }
VMS_Set_Psect		vms.c	/^VMS_Set_Psect(Psect_Index, Offset, Record_Type)/ ;" function 35 { VMS_Fix_Indirect_Reference VMS_Store_PIC_Symbol_Reference VMS_write_object_file }	{ Flush_VMS_Object_Record_Buffer Object_Record_Buffer Object_Record_Offset PUT_CHAR PUT_LONG PUT_SHORT Set_VMS_Object_File_Record TIR$C_CTL_SETR TIR$C_STA_P TIR$C_STA_WP }
VMS_Store_Immediate_Data		vms.c	/^VMS_Store_Immediate_Data(Pointer, Size, Record_Typ/ ;" function 47 { VMS_Fix_Indirect_Reference VMS_Store_Repeated_Data VMS_TBT_Line_PC_Correlation VMS_TBT_Module_Begin VMS_TBT_Module_End VMS_TBT_Routine_Begin VMS_TBT_Routine_End VMS_TBT_Source_File VMS_TBT_Source_Lines VMS_write_object_file }	{ Flush_VMS_Object_Record_Buffer Object_Record_Buffer Object_Record_Offset PUT_CHAR Set_VMS_Object_File_Record i register }
VMS_Store_PIC_Symbol_Reference		vms.c	/^VMS_Store_PIC_Symbol_Reference(Symbol, Offset, PC_/ ;" function 138 { VMS_write_object_file }	{ Flush_VMS_Object_Record_Buffer Object_Record_Buffer Object_Record_Offset PUT_CHAR PUT_COUNTED_STRING PUT_LONG PUT_SHORT Set_VMS_Object_File_Record TIR$C_OPR_AD TIR$C_STA_GB TIR$C_STA_L TIR$C_STA_P TIR$C_STA_WP TIR$C_STO_PIC TIR$C_STO_PID VMS_Case_Hack_Symbol VMS_Set_Psect VMS_Symbol register }
VMS_Store_Repeated_Data		vms.c	/^VMS_Store_Repeated_Data(Repeat_Count,Pointer, Size/ ;" function 48 { VMS_write_object_file }	{ Flush_VMS_Object_Record_Buffer Object_Record_Buffer Object_Record_Offset PUT_CHAR PUT_LONG Set_VMS_Object_File_Record TIR$C_STA_L TIR$C_STO_RIV VMS_Store_Immediate_Data }
VMS_Symbol		vms.c	/^struct VMS_Symbol {/ ;" struct 7 { VMS_Store_PIC_Symbol_Reference VMS_write_object_file }	{ }
VMS_Symbols		vms.c	/^static struct VMS_Symbol *VMS_Symbols = 0;/ ;" global 1 { VMS_write_object_file }	{ }
VMS_TBT_Line_PC_Correlation		vms.c	/^VMS_TBT_Line_PC_Correlation(Line_Number, Offset, P/ ;" function 104 { VMS_write_object_file }	{ DST$C_DELTA_PC_ DST$C_INCR_LINU DST$C_INCR_LINUM_ DST$C_LINE_NU DST$C_SET_ABS_P DST$C_SET_LINE_NU DST$C_TERM_ OBJ$C_TB Object_Record_Offset PUT_CHAR PUT_LONG PUT_SHORT TIR$C_STA_P TIR$C_STA_WP TIR$C_STO_PID VMS_Store_Immediate_Data register }
VMS_TBT_Module_Begin		vms.c	/^VMS_TBT_Module_Begin()/ ;" function 61 { VMS_write_object_file }	{ DST$C_ DST$C_MODBE OBJ$C_TB VMS_Store_Immediate_Data out_file_name register }
VMS_TBT_Module_End		vms.c	/^VMS_TBT_Module_End()/ ;" function 14 { VMS_write_object_file }	{ DST$C_MODEN OBJ$C_TB VMS_Store_Immediate_Data }
VMS_TBT_Routine_Begin		vms.c	/^VMS_TBT_Routine_Begin(symbolP, Psect)/ ;" function 63 { VMS_write_object_file }	{ DST$C_RTNBE OBJ$C_TB Object_Record_Offset PUT_CHAR PUT_LONG PUT_SHORT TIR$C_STA_WP TIR$C_STO_PID VMS_Store_Immediate_Data register }
VMS_TBT_Routine_End		vms.c	/^VMS_TBT_Routine_End(Size)/ ;" function 25 { VMS_write_object_file }	{ DST$C_RTNEN OBJ$C_TB VMS_Store_Immediate_Data }
VMS_TBT_Source_File		vms.c	/^VMS_TBT_Source_File(Filename, ID_Number)/ ;" function 132 { VMS_write_object_file }	{ DST$C_SOURC DST$C_SRC_DECLFIL DST$C_SRC_FORMFEE DST$C_SRC_SETFIL DST$C_SRC_SETREC_ OBJ$C_TB VMS_Store_Immediate_Data i register }
VMS_TBT_Source_Lines		vms.c	/^VMS_TBT_Source_Lines(Number_Of_Lines)/ ;" function 23 { VMS_write_object_file }	{ DST$C_SOURC DST$C_SRC_DEFLINES_ OBJ$C_TB VMS_Store_Immediate_Data }
VMS_write_object_file		vms.c	/^VMS_write_object_file(text_siz, data_siz, text_fra/ ;" function 742 { write_object_file }	{ Close_VMS_Object_File Create_VMS_Object_File Entry_Point_Symbol OBJ$C_TI VMS_Fix_Indirect_Reference VMS_Global_Symbol_Spec VMS_Initialized_Data_Size VMS_Procedure_Entry_Pt VMS_Psect_Spec VMS_Set_Psect VMS_Store_Immediate_Data VMS_Store_PIC_Symbol_Reference VMS_Store_Repeated_Data VMS_Symbol VMS_Symbols VMS_TBT_Line_PC_Correlation VMS_TBT_Module_Begin VMS_TBT_Module_End VMS_TBT_Routine_Begin VMS_TBT_Routine_End VMS_TBT_Source_File VMS_TBT_Source_Lines Write_VMS_EOM_Record Write_VMS_MHD_Records bcopy bss_address_frag data_fix_root data_frag_root fix fragS i local_bss_counter register sy_type sy_value symbol symbolS symbol_rootP text_fix_root text_frag_root xmalloc }
WB		vax.c	/^#define WB (2+-32768)/ ;" macro 1 { }	{ }
WF		vax.c	/^#define WF (2+ 32767)/ ;" macro 1 { }	{ }
WORD		i386.c	/^#define WORD 1/ ;" macro 1 { SIZE_FROM_RELAX_STATE md_convert_frag }	{ }
WORD_OPCODE_SUFFIX		i386.h	/^#define WORD_OPCODE_SUFFIX  'w'/ ;" macro 1 { OPCODE_SUFFIX_TO_TYPE i386_operand md_assemble }	{ }
WORD_PREFIX_OPCODE		i386-opcode.h	/^#define WORD_PREFIX_OPCODE 0x66/ ;" macro 1 { md_assemble md_convert_frag }	{ }
Word		i386.h	/^#define Word (Reg16|Imm16)/ ;" macro 1 { OPCODE_SUFFIX_TO_TYPE }	{ Imm16 Reg16 }
WordMem		i386.h	/^#define WordMem   (Mem16|Mem32|Disp|BaseIndex)/ ;" macro 1 { }	{ BaseIndex Disp Mem16 Mem32 }
WordReg		i386.h	/^#define WordReg (Reg16|Reg32)	\/* for push\/pop oper/ ;" macro 1 { }	{ Reg16 Reg32 }
Write_VMS_EOM_Record		vms.c	/^Write_VMS_EOM_Record(Psect, Offset)/ ;" function 34 { VMS_write_object_file }	{ Flush_VMS_Object_Record_Buffer OBJ$C_EO PUT_CHAR PUT_LONG Set_VMS_Object_File_Record }
Write_VMS_MHD_Records		vms.c	/^Write_VMS_MHD_Records()/ ;" function 91 { VMS_write_object_file }	{ Flush_VMS_Object_Record_Buffer MHD$C_LN MHD$C_MH OBJ$C_HD OBJ$C_STRLV Object_Record_Buffer PUT_CHAR PUT_COUNTED_STRING PUT_SHORT Set_VMS_Object_File_Record compiler_version_string i out_file_name register }
ZPC		m68k.c	/^#define ZPC	(PC+1)		\/*  34 Hack for Program space,/ ;" macro 1 { SR m68_ip m68k_ip_op m68k_reg_parse }	{ PC }
_		i386-opcode.h	/^#define _ None/ ;" macro 1 { }	{ }
__		expr.c	/^#define __ O_illegal/ ;" macro 1 { }	{ }
__INT_TO_PTR		obstack.h	/^#define __INT_TO_PTR(P) ((P) + (char *)0)/ ;" macro 1 { obstack_finish }	{ }
__OBSTACKS__		obstack.h	/^#define __OBSTACKS__/ ;" macro 1 { }	{ }
__PTR_TO_INT		obstack.h	/^#define __PTR_TO_INT(P) ((P) - (char *)0)/ ;" macro 1 { obstack_finish }	{ }
__STDC__		obstack.c	/^#ifdef __STDC__/ ;" global 2 { }	{ }
_doprnt		vms.c	/^_doprnt(Format, a, f)/ ;" function 21 { as_fatal as_warn panic }	{ }
_obstack		obstack.c	/^struct obstack *_obstack;/ ;" global 1 { obstack_object_size obstack_room }	{ }
_obstack_begin		obstack.c	/^_obstack_begin (h, size, alignment, chunkfun, free/ ;" function 33 { obstack_begin obstack_init }	{ DEFAULT_ALIGNMENT DEFAULT_ROUNDING _obstack_chunk h register size }
_obstack_chunk		obstack.h	/^struct _obstack_chunk		\/* Lives at front of each c/ ;" global 1 { _obstack_begin _obstack_free _obstack_newchunk }	{ }
_obstack_free		obstack.c	/^_obstack_free (h, obj)/ ;" function 25 { obstack_free }	{ POINTER _obstack_chunk abort h register }
_obstack_newchunk		obstack.c	/^_obstack_newchunk (h, length)/ ;" function 31 { obstack_1grow obstack_blank obstack_grow obstack_grow0 }	{ COPYING_UNIT _obstack_chunk h i register }
a_out_to_mach_O		atom.c	/^a_out_to_mach_O(a_out, size_a_out, file_name, gdbs/ ;" function 415 { write_object_file }	{ NULL as_fatal bcopy bss_section bzero data_nreloc data_reloc data_reloff data_section header mod_section output_seek output_write p reloc_segment sel_section size sourcevector sym_section symbol_segment symbol_table text_section xmalloc }
abort		m68k.c	/^abort()/ ;" function 5 { _obstack_free atof_generic gen_to_words get_num i860_ip install_gen_operand install_operand m68_ip m68k_ip_op md_convert_frag md_create_long_jump md_create_short_jump md_estimate_size_before_relax md_insn_to_chars md_number_to_chars md_number_to_disp md_number_to_field md_number_to_imm panic }	{ }
abs_symbol		symbols.c	/^symbolS	abs_symbol;/ ;" global 1 { fixup_segment md_assemble symbol_begin }	{ }
add_exp		m68k.c	/^#define add_exp(beg,end) (\\/ ;" macro 1 { m68k_ip_op }	{ the_ins }
add_file		gdb-lines.c	/^add_file(file_number)/ ;" function 13 { gdb_line gdb_line_tab }	{ first_file g_line_file g_line_vector xmalloc }
add_fix		m68k.c	/^#define add_fix(width,exp,pc_rel) {\\/ ;" macro 1 { m68_ip }	{ adds offs subs the_ins }
add_frag		m68k.c	/^#define add_frag(add,off,type)  {\\/ ;" macro 1 { m68_ip }	{ the_ins }
add_vector		gdb-lines.c	/^add_vector(f)/ ;" function 13 { gdb_line }	{ MAX_LINES_PER_VECTOR g_line g_line_vector xmalloc }
addr_mode		ns32k.c	/^int addr_mode(operand,addr_modeP,recursive_level)/ ;" function 191 { IIF addr_mode get_addr_mode }	{ DEFAULT NULL addr_mode addr_modeP as_warn i operand register }
addr_modeP		ns32k.c	/^addr_modeS addr_modeP;/ ;" global 1 { addr_mode encode_operand get_addr_mode }	{ }
addr_modeS		ns32k.c	/^typedef struct addr_mode addr_modeS;/ ;" typedef 1 { }	{ }
adds		m68k.c	/^#define adds(exp)	((exp)->e_exp.X_add_symbol)/ ;" macro 1 { add_fix get_num isvar m68_ip }	{ }
addword		m68k.c	/^#define addword(w)	the_ins.opcode[the_ins.numo++]=/ ;" macro 1 { m68_ip }	{ the_ins }
alt_notend_table		m68k.c	/^static char alt_notend_table[256];/ ;" global 1 { md_begin notend }	{ }
answer		hash.c	/^char answer[100];		\/* human farts here *\// ;" global 1 { Mhash Mvax md_number_to_chars md_number_to_disp md_number_to_field md_number_to_imm what whattable }	{ }
append		append.c	/^append (charPP, fromP, length)/ ;" function 10 { emit_relocations write_object_file }	{ bcopy }
applicatee		hash.c	/^applicatee(string,value)/ ;" function 7 { Mhash }	{ NULL value }
asH		as.h	/^#define asH			\/* Don't declare things twice. *\// ;" macro 1 { }	{ }
as_1_char		input-scrub.c	/^as_1_char (c,stream)/ ;" function 16 { as_howmuch }	{ }
as_fatal		messages.c	/^as_fatal (Format, args)/ ;" function 10 { BAD_CASE a_out_to_mach_O convert_iif emit_relocations encode_operand find fixup_segment frag_grow gdb_file_read get_objc_section_bounds input_scrub_next_buffer lose m68_ip md_assemble md_begin md_number_to_disp md_number_to_imm optlist output_file_append output_file_close output_file_create output_seek output_write parse pobegin s_abort symbol_table_insert }	{ _doprnt as_where }
as_howmuch		input-scrub.c	/^as_howmuch (stream)/ ;" function 17 { as_where }	{ as_1_char input_line_pointer p register }
as_perror		input-scrub.c	/^as_perror(gripe, filename)/ ;" function 26 { gdb_file_read gdb_file_size input_file_give_next_buffer input_file_open output_file_append output_file_close output_file_create }	{ as_where input_file_is_open }
as_warn		app.c	/^as_warn(str)/ ;" function 6 { Mas addr_mode big_cons colon cons convert_iif crack_operand demand_copy_C_string demand_copy_string do_scrub_next_char equals expr expr_part float_cons gdb_alter gdb_block_beg gdb_block_end gdb_block_position gdb_line_tab gdb_lines_emit get_absolute_expression get_addr_mode get_known_segmented_expression get_num get_segmented_expression i386_operand i860_ip ignore_rest_of_line input_file_open input_scrub_next_buffer list_search m68_ip md_assemble md_convert_frag md_estimate_size_before_relax md_number_to_chars md_number_to_disp md_number_to_field md_number_to_imm next_char_of_string operand parse pseudo_set read_a_source_file s_align s_comm s_desc s_fill s_gdbbeg s_gdbblock s_gdbend s_gdbline s_gdblinetab s_gdbsym s_i860_align s_lcomm s_lsym s_org s_set s_space (etc) }	{ }
as_where		input-scrub.c	/^as_where()/ ;" function 42 { as_fatal as_perror as_warn gen_to_words panic }	{ as_howmuch input_file_is_open line line_numberT logical_input_file logical_input_line p physical_input_file physical_input_line }
atof_generic		atof-generic.c	/^atof_generic (/ ;" function 429 { operand }	{ ERROR_EXPONENT_OVERFLOW FALSE FLONUM_TYPE LITTLENUM_MASK LITTLENUM_NUMBER_OF_BITS LITTLENUM_TYPE LOG_TO_BASE_2_OF_10 TRUE abort bzero flonum_copy flonum_multip flonum_negative_powers_of_ten flonum_positive_powers_of_ten index p table_size_of_flonum_powers_of_ten }
atof_m68k		atof-m68k.c	/^atof_m68k(str, type, words)/ ;" function 209 { m68_ip md_atof }	{ MAXMANTISSA SKIPWHITE bzero i p packmantissa pd_fp }
base_index_byte		i386.h	/^typedef struct {/ ;" typedef 5 { }	{ }
bcopy		append.c	/^#define bcopy(from,to,n) memcpy(to,from,n)/ ;" macro 1 { VMS_write_object_file a_out_to_mach_O append big_cons bignum_copy float_cons flonum_copy input_scrub_begin input_scrub_next_buffer md_assemble md_number_to_chars md_number_to_disp md_number_to_field md_number_to_imm md_ri_to_chars obstack_grow obstack_grow0 read_a_source_file }	{ }
below		vax.c	/^You have just broken the encoding below, which ass/ ;" global 1 { }	{ }
big_cons		read.c	/^big_cons(nbytes)		\/* worker to do .quad etc statem/ ;" function 109 { }	{ BITS_PER_CHAR MASK_CHAR SKIP_WHITESPACE as_warn bcopy bignum_high bignum_low demand_empty_rest_of_line frag_more grow_bignum hex_value input_line_pointer is_it_end_of_statement know need_pass_2 p register }
big_operand_bits		vax.c	/^LITTLENUM_TYPE big_operand_bits [ VIT_MAX_OPERANDS/ ;" global 1 { md_begin }	{ }
bignum_copy		bignum-copy.c	/^bignum_copy (in, in_length, out, out_length)/ ;" function 34 { md_assemble }	{ LITTLENUM_SHIFT LITTLENUM_TYPE bcopy bzero p register }
bignum_high		read.c	/^static char *	bignum_high;	\/* Highest char of bign/ ;" global 1 { big_cons grow_bignum }	{ }
bignum_limit		read.c	/^static char *	bignum_limit;	\/* 1st illegal address/ ;" global 1 { grow_bignum read_begin }	{ }
bignum_low		read.c	/^static char *	bignum_low;	\/* Lowest char of bignum/ ;" global 1 { big_cons grow_bignum read_begin }	{ }
bit_fix		write.h	/^struct bit_fix {/ ;" struct 10 { }	{ }
bit_fixS		write.h	/^typedef struct bit_fix bit_fixS;/ ;" typedef 1 { bit_fix_new }	{ }
bit_fix_new		ns32k.c	/^bit_fix_new (size,offset,min,max,add,base_type,bas/ ;" function 23 { encode_operand }	{ bit_fixS min notes obstack_alloc register size }
broken_word		struc-symbol.h	/^struct broken_word {/ ;" struct 14 { colon cons relax_segment write_object_file }	{ }
broken_words		read.c	/^struct broken_word *broken_words;/ ;" global 1 { colon cons write_object_file }	{ }
bss_address_frag		as.h	/^COMMON fragS  bss_address_frag;	\/* For local commo/ ;" global 1 { VMS_write_object_file s_lcomm write_object_file }	{ }
bss_section		atom.c	/^struct section			bss_section;	\/* __DATA, __bss *\// ;" global 1 { a_out_to_mach_O }	{ }
buffer_length		input-scrub.c	/^static int	buffer_length;	\/* What is the largest s/ ;" global 1 { input_scrub_begin }	{ }
buffer_limit		read.c	/^static char *	buffer_limit;	\/* -> 1 + last char in/ ;" global 1 { discard_rest_of_line ignore_rest_of_line read_a_source_file }	{ }
buffer_start		input-scrub.c	/^static char *	buffer_start;	\/* -> 1st char of full/ ;" global 1 { input_scrub_begin input_scrub_new_file input_scrub_next_buffer }	{ }
bump_line_counters		input-scrub.c	/^bump_line_counters ()/ ;" function 5 { read_a_source_file }	{ logical_input_line physical_input_line }
by		read.c	/^The following table is indexed by [ (char) ] and w/ ;" global 1 { }	{ }
bzero		app.c	/^#define bzero(s,n) memset(s,0,n)/ ;" macro 1 { Mas Mm68k a_out_to_mach_O atof_generic atof_m68k bignum_copy convert_iif do_scrub_begin emit_relocations flonum_copy i860_ip m68_ip md_assemble md_begin new_0 new_1 new_2 s_fill symbol_begin vip vip_op_1 }	{ }
clean_up_expression		expr.c	/^clean_up_expression (expressionP)/ ;" function 45 { expr operand }	{ BAD_CASE NULL }
colon		symbols.c	/^colon (sym_name)		\/* just seen "x:" - rattle symbo/ ;" function 137 { local_colon read_a_source_file }	{ as_warn broken_word broken_words fragS frag_now frag_var frags know lose md_long_jump_size md_short_jump_size new_broken_words obstack_next_free register relax_substateT seg_N_TYPE seg_name sy_desc sy_other sy_type sy_value symbol symbolS symbol_new symbol_table_insert symbol_table_lookup valueT }
command		hash.c	/^char    command;/ ;" global 1 { Mhash }	{ }
comment_chars		app.c	/^char comment_chars[] = "|";/ ;" global 1 { do_scrub_begin }	{ }
compiler_version_string		vms.c	/^char *compiler_version_string;/ ;" global 1 { Mas Write_VMS_MHD_Records }	{ }
cons		read.c	/^cons(nbytes)			\/* worker to do .byte etc statement/ ;" function 129 { s_int s_long }	{ BAD_CASE BITS_PER_CHAR NULL as_warn broken_word broken_words demand_empty_rest_of_line expression expressionS fix_new frag frag_more frag_now input_line_pointer is_it_end_of_statement know md_number_to_chars need_pass_2 new_broken_words p register segT seg_name sy_name xmalloc }
const		i860-opcode.h	/^#define const/ ;" macro 1 { i860_ip }	{ }
convert_iif		ns32k.c	/^convert_iif()/ ;" function 206 { md_assemble }	{ BRANCH IIF_ENTRIES IND LITTLENUM_TYPE UNDEF as_fatal as_warn bzero evaluate_expr exprP fix_new_ns32k fragS frag_more frag_now frag_variant frags gen_to_words generic_bignum i iif md_number_to_chars md_number_to_disp md_number_to_imm obstack_blank_fast register segT size }
cpureg		ns32k.c	/^struct option cpureg[]= \/* lpr spr *\// ;" global 17 { encode_operand }	{ }
crack_operand		m68k.c	/^crack_operand(str,opP)/ ;" function 42 { m68_ip }	{ FAIL as_warn m68k_ip_op notend register }
cs		i386-opcode.h	/^seg_entry cs = { "cs", 0x2e };/ ;" global 1 { i386_operand }	{ }
data0_frchainP		subsegs.c	/^	*	data0_frchainP;/ ;" global 1 { subsegs_begin write_object_file }	{ }
data_fix_root		write.h	/^COMMON fixS *	data_fix_root;	\/* Chains fixSs. *\// ;" global 1 { VMS_write_object_file perform_an_assembly_pass subseg_change write_object_file }	{ }
data_frag_root		write.c	/^static struct frag *	data_frag_root;/ ;" global 1 { VMS_write_object_file get_objc_section_bounds write_object_file }	{ }
data_last_frag		write.c	/^static struct frag *	data_last_frag;	\/* Last frag / ;" global 1 { get_objc_section_bounds write_object_file }	{ }
data_nreloc		atom.c	/^long data_reloff, data_nreloc;/ ;" global 1 { a_out_to_mach_O }	{ }
data_reloc		atom.c	/^struct relocation_info *data_reloc;/ ;" global 1 { a_out_to_mach_O }	{ }
data_reloff		atom.c	/^long data_reloff, data_nreloc;/ ;" global 1 { a_out_to_mach_O }	{ }
data_section		atom.c	/^struct section			data_section;	\/* __DATA, __data */ ;" global 1 { a_out_to_mach_O }	{ }
defined		write.c	/^#if defined(I860)/ ;" function 1 { }	{ }
definitions		hash.c	/^Pani!! Please make #include "stat.h" agree with pr/ ;" global 1 { }	{ }
demand_copy_C_string		read.c	/^demand_copy_C_string (len_pointer)/ ;" function 24 { stab }	{ as_warn demand_copy_string register }
demand_copy_string		read.c	/^demand_copy_string (lenP)/ ;" function 28 { demand_copy_C_string s_file }	{ NULL SKIP_WHITESPACE as_warn ignore_rest_of_line input_line_pointer next_char_of_string notes obstack_1grow obstack_finish register }
demand_empty_rest_of_line		read.c	/^demand_empty_rest_of_line()/ ;" function 13 { big_cons cons float_cons read_a_source_file s_align s_comm s_data s_data1 s_data2 s_desc s_even s_fill s_gdbbeg s_gdbblock s_gdbend s_gdbline s_gdblinetab s_gdbsym s_globl s_i860_align s_lcomm s_lsym s_org s_reference s_set s_space s_text stab stringer }	{ SKIP_WHITESPACE ignore_rest_of_line input_line_pointer is_end_of_line }
desc		ns32k.c	/^struct ns32k_opcode *desc; \/* pointer at descripti/ ;" global 1 { encode_operand get_addr_mode parse symbol_new }	{ }
destroy		hash.c	/^destroy(string,value)/ ;" function 8 { Mhash }	{ NULL value }
digit_chars		i386.c	/^static char digit_chars[256];/ ;" global 1 { is_digit_char md_begin }	{ }
discard_rest_of_line		read.c	/^discard_rest_of_line()/ ;" function 13 { s_file s_line }	{ buffer_limit input_line_pointer is_end_of_line know }
disp_expressions		i386.c	/^static expressionS disp_expressions[2], im_express/ ;" global 1 { i386_operand md_assemble }	{ }
disp_size		ns32k.c	/^char disp_size[]={ 4,1,2,0,4 };/ ;" global 1 { }	{ }
disp_test		ns32k.c	/^char disp_test[]={ 0,0,0,0,0,0,0,0,/ ;" global 4 { get_addr_mode }	{ }
do_scrub_begin		app.c	/^do_scrub_begin()/ ;" function 19 { input_scrub_begin }	{ LEX_IS_COMMENT_START LEX_IS_LINE_COMMENT_START LEX_IS_LINE_SEPERATOR LEX_IS_SYMBOL_COMPONENT LEX_IS_WHITESPACE bzero comment_chars lex line_comment_chars p symbol_chars }
do_scrub_next_char		app.c	/^do_scrub_next_char(get,unget)/ ;" function 247 { Mapp input_file_give_next_buffer read_a_source_file }	{ IS_COMMENT IS_LINE_COMMENT IS_LINE_SEPERATOR IS_WHITESPACE as_warn }
ds		i386-opcode.h	/^seg_entry ds = { "ds", 0x3e };/ ;" global 1 { i386_operand }	{ }
dual_insn_mode		i860.c	/^static int dual_insn_mode = 0;/ ;" global 1 { i860_ip s_dual }	{ }
dummy		i386.c	/^void dummy ()/ ;" function 5 { }	{ input_line_pointer }
ebp		i386.c	/^static reg_entry *ebp, *esp;/ ;" global 1 { md_assemble md_begin }	{ }
emit_relocations		write.c	/^emit_relocations (fixP, segment_address_in_file)/ ;" function 133 { write_object_file }	{ append as_fatal bzero flagseen md_ri_to_chars mod_section nbytes_r_length next_object_file_charP register sel_section size sy_name sy_type sy_value sym_section symbolS }
encode_operand		ns32k.c	/^encode_operand(argc,argv,operandsP,suffixP,im_size/ ;" function 140 { parse }	{ BRANCH BYTE IIF IND NULL addr_modeP as_fatal bit_fix_new cpureg desc freeptr get_addr_mode i iif list_search mmureg opt1 opt2 opt3 opt4 opt5 opt6 optlist register }
endop		m68k-opcode.h	/^struct m68k_opcode *endop = m68k_opcodes+sizeof(m6/ ;" global 1 { md_begin }	{ }
equals		read.c	/^equals(sym_name)/ ;" function 34 { read_a_source_file }	{ as_warn expressionS frag_var get_known_segmented_expression input_line_pointer need_pass_2 now_seg p pseudo_set register relax_substateT segT seg_name symbol symbol_find_or_make }
es		i386-opcode.h	/^seg_entry es = { "es", 0x26 };/ ;" global 1 { i386_operand }	{ }
esp		i386.c	/^static reg_entry *ebp, *esp;/ ;" global 1 { i386_operand md_assemble md_begin }	{ }
evaluate_expr		ns32k.c	/^segT evaluate_expr(resultP,ptr)/ ;" function 12 { convert_iif get_addr_mode }	{ exprP expression input_line_pointer register segT }
exactly		read.c	/^a char does not have exactly 256 states (hopefully/ ;" global 1 { }	{ }
exp_of_operand		vax.c	/^exp_of_operand [ VIT_MAX_OPERANDS ];/ ;" global 1 { md_assemble }	{ }
expr		expr.c	/^expr (rank, resultP)/ ;" function 229 { expr expression }	{ BAD_CASE NULL TRUE as_warn clean_up_expression expr expr_part expressionS input_line_pointer know need_pass_2 op_encoding op_rank operand operatorT register segT sy_name symbol }
exprP		ns32k.c	/^expressionS exprP;/ ;" global 1 { convert_iif evaluate_expr get_addr_mode }	{ }
expr_end		i860.c	/^static char *expr_end;/ ;" global 1 { getExpression i860_ip }	{ }
expr_part		expr.c	/^expr_part (symbol_1_PP, symbol_2_P)/ ;" function 74 { expr }	{ NULL N_TYPE_seg as_warn know segT seg_N_TYPE sy_name sy_type }
expression		expr.h	/^#define expression(result) expr(0,result)/ ;" macro 1 { cons evaluate_expr getExpression get_absolute_expression get_num get_segmented_expression i386_operand md_assemble operand pseudo_set s_lsym }	{ expr }
expressionS		expr.h	/^typedef struct/ ;" typedef 9 { cons equals expr get_absolute_expression i386_operand md_assemble pseudo_set read_a_source_file s_lsym s_org s_set }	{ }
f_in		input-file.c	/^FILE *f_in;	\/* JF do things the RIGHT way *\// ;" global 1 { input_file_begin input_file_give_next_buffer input_file_is_open input_file_open }	{ }
file		gdb-file.c	/^static FILE *file;/ ;" global 1 { gdb_file_read gdb_file_size }	{ }
file_len		gdb-file.c	/^static long file_len;/ ;" global 1 { gdb_file_read gdb_file_size }	{ }
file_name		input-file.c	/^char *	file_name;/ ;" global 1 { input_file_give_next_buffer input_file_open }	{ }
find		gdb-blocks.c	/^find (block_number)/ ;" function 33 { find_create gdb_block_emit }	{ BLOCK_NUMBER_LIMIT LOG_2_Z0 LOG_2_Z1 as_fatal gdb_block new_0 new_1 node_0_T node_1_T register root }
find_create		gdb-blocks.c	/^find_create (block_number)/ ;" function 9 { gdb_block_beg gdb_block_end gdb_block_position }	{ find highest_block_number_seen }
first_file		gdb-lines.c	/^struct g_line_file *first_file;/ ;" global 1 { add_file gdb_line gdb_line_tab gdb_lines_emit }	{ }
fix		write.h	/^struct fix/ ;" struct 21 { VMS_Check_For_Main VMS_write_object_file }	{ }
fixS		write.h	/^typedef struct fix	fixS;/ ;" typedef 1 { fix_new fix_new_ns32k write_object_file }	{ }
fix_new		write.c	/^#if defined(I860)/ ;" function 1 { cons md_assemble md_convert_frag md_create_long_jump md_estimate_size_before_relax write_object_file }	{ }
fix_new_ns32k		ns32k.c	/^fix_new_ns32k (frag, where, size, add_symbol, sub_/ ;" function 33 { convert_iif md_estimate_size_before_relax }	{ fixS frag notes obstack_alloc register seg_fix_rootP size where }
fixup_segment		write.c	/^fixup_segment (fixP, this_segment_type)/ ;" function 170 { write_object_file }	{ BAD_CASE NULL abs_symbol as_fatal as_warn fragS know md_number_to_chars md_number_to_disp md_number_to_field md_number_to_imm register seg_name size sy_name sy_type sy_value symbolS where }
flagseen		as.h	/^flagseen[128];			\/* ['x'] TRUE if "-x" seen. *\// ;" global 1 { Mas as_warn emit_relocations input_scrub_new_file m68_ip md_assemble md_convert_frag md_create_long_jump md_estimate_size_before_relax relax_segment s_gdbbeg s_gdbblock s_gdbend s_gdbline s_gdblinetab s_gdbsym write_object_file }	{ }
float_cons		read.c	/^float_cons(float_type)		\/* Worker to do .float etc/ ;" function 64 { }	{ MAXIMUM_NUMBER_OF_CHARS_FOR_FLOAT SKIP_WHITESPACE as_warn bcopy demand_empty_rest_of_line frag_more ignore_rest_of_line input_line_pointer is_it_end_of_statement know md_atof need_pass_2 p register }
float_operand		vax.c	/^FLONUM_TYPE float_operand [ VIT_MAX_OPERANDS ];/ ;" global 1 { md_assemble md_begin }	{ }
flonum_copy		flonum-copy.c	/^flonum_copy (in, out)/ ;" function 48 { atof_generic md_assemble }	{ LITTLENUM_TYPE bcopy bzero }
flonum_multip		flonum-mult.c	/^flonum_multip (a, b, product)/ ;" function 117 { atof_generic }	{ LITTLENUM_MASK LITTLENUM_NUMBER_OF_BITS LITTLENUM_TYPE }
flonum_negative_powers_of_ten		flonum-const.c	/^FLONUM_TYPE flonum_negative_powers_of_ten [] = {/ ;" global 14 { atof_generic }	{ }
flonum_positive_powers_of_ten		flonum-const.c	/^FLONUM_TYPE flonum_positive_powers_of_ten [] = {/ ;" global 14 { atof_generic }	{ }
fooalign		obstack.c	/^struct fooalign {char x; double d;};/ ;" struct 1 { DEFAULT_ALIGNMENT }	{ }
fooround		obstack.c	/^union fooround {long x; double d;};/ ;" struct 1 { DEFAULT_ROUNDING }	{ }
frag		as.h	/^struct frag			\/* a code fragment *\// ;" global 1 { cons fix_new fix_new_ns32k gdb_block_beg gdb_block_end md_assemble md_create_long_jump relax_segment stab symbol_new write_object_file }	{ }
fragS		as.h	/^typedef struct frag fragS;/ ;" typedef 1 { VMS_Check_For_Main VMS_write_object_file colon convert_iif fixup_segment frag_new print_frags subseg_new subsegs_begin write_object_file }	{ }
frag_align		frags.c	/^frag_align (alignment, fill_character)/ ;" function 7 { s_align s_even s_i860_align write_object_file }	{ frag_var relax_substateT symbolS }
frag_grow		frags.c	/^frag_grow (nchars)/ ;" function 10 { frag_more frag_var }	{ as_fatal frag_new frag_now frag_wane frags obstack_room }
frag_more		frags.c	/^frag_more (nchars)/ ;" function 10 { big_cons cons convert_iif float_cons md_assemble }	{ frag_grow frags obstack_blank_fast obstack_next_free register }
frag_new		frags.c	/^frag_new (old_frags_var_max_size)/ ;" function 45 { FRAG_APPEND_1_CHAR frag_grow frag_var frag_variant }	{ NULL SIZEOF_STRUCT_FRAG fragS frag_now frags frchainS frchain_now know obstack_alignment_mask obstack_blank obstack_finish obstack_next_free register }
frag_now		as.h	/^COMMON fragS *	frag_now;	\/* -> current frag we are/ ;" global 1 { FRAG_APPEND_1_CHAR colon cons convert_iif frag_grow frag_new frag_var frag_variant gdb_line md_assemble operand s_gdbbeg s_gdbend stab subseg_new subsegs_begin write_object_file }	{ }
frag_var		frags.c	/^frag_var (type, max_chars, var, subtype, symbol, o/ ;" function 26 { colon equals frag_align md_assemble s_fill s_org s_set s_space }	{ frag_grow frag_new frag_now frags obstack_blank_fast obstack_next_free register symbol }
frag_variant		frags.c	/^frag_variant (type, max_chars, var, subtype, symbo/ ;" function 27 { convert_iif }	{ frag_new frag_now frags obstack_next_free register symbol }
frag_wane		frags.c	/^frag_wane (fragP)/ ;" function 7 { FRAG_APPEND_1_CHAR frag_grow md_estimate_size_before_relax subseg_new write_object_file }	{ }
frags		frags.c	/^struct obstack  frags;	\/* All, and only, frags liv/ ;" global 1 { FRAG_APPEND_1_CHAR colon convert_iif frag_grow frag_more frag_new frag_var frag_variant gdb_line operand s_gdbbeg s_gdbend stab subseg_new subsegs_begin }	{ }
frchain		subsegs.h	/^struct frchain			\/* control building of a frag cha/ ;" global 1 { VMS_Check_For_Main write_object_file }	{ }
frchainS		subsegs.h	/^typedef struct frchain frchainS;/ ;" typedef 1 { frag_new subseg_new }	{ }
frchain_now		subsegs.c	/^	*	frchain_now,	\/* Commented in "subsegs.h". *\// ;" global 1 { frag_new subseg_new subsegs_begin }	{ }
frchain_root		subsegs.c	/^frchain**	frchain_root,/ ;" global 1 { VMS_Check_For_Main subseg_new subsegs_begin write_object_file }	{ }
freeptr		ns32k.c	/^char *freeptr,*freeptr_static; \/* points at some n/ ;" global 1 { encode_operand md_assemble md_end parse }	{ }
freeptr_static		ns32k.c	/^char *freeptr,*freeptr_static; \/* points at some n/ ;" global 1 { md_assemble md_begin }	{ }
fs		i386-opcode.h	/^seg_entry fs = { "fs", 0x64 };/ ;" global 1 { i386_operand }	{ }
g_line		gdb-lines.c	/^struct g_line {/ ;" struct 5 { add_vector gdb_line gdb_lines_emit }	{ }
g_line_file		gdb-lines.c	/^struct g_line_file {/ ;" struct 7 { add_file gdb_line gdb_line_tab gdb_lines_emit }	{ }
g_line_vector		gdb-lines.c	/^struct g_line_vector {/ ;" struct 5 { add_file add_vector gdb_line gdb_lines_emit }	{ }
gdb_alter		gdb.c	/^gdb_alter (offset, value)	\/* put value into GDB fi/ ;" function 22 { gdb_block_emit gdb_lines_emit gdb_symbols_emit }	{ as_warn md_number_to_chars size value where }
gdb_begin		gdb.c	/^gdb_begin (filename)		\/* because we failed to esta/ ;" function 22 { Mas }	{ gdb_block_begin gdb_file_begin gdb_file_read gdb_file_size gdb_symbols_begin size where xmalloc }
gdb_block		gdb-blocks.c	/^struct gdb_block/ ;" struct 9 { find gdb_block_beg gdb_block_emit gdb_block_end gdb_block_position }	{ }
gdb_block_beg		gdb-blocks.c	/^gdb_block_beg (block_number, frag, offset)/ ;" function 21 { read_a_source_file s_gdbbeg }	{ as_warn find_create frag gdb_block }
gdb_block_begin		gdb-blocks.c	/^gdb_block_begin ()/ ;" function 5 { gdb_begin }	{ highest_block_number_seen new_2 root }
gdb_block_emit		gdb-blocks.c	/^gdb_block_emit ()/ ;" function 24 { gdb_emit gdb_mach_O_emit }	{ find gdb_alter gdb_block highest_block_number_seen }
gdb_block_end		gdb-blocks.c	/^gdb_block_end (block_number, frag, offset)/ ;" function 21 { read_a_source_file s_gdbend }	{ as_warn find_create frag gdb_block }
gdb_block_position		gdb-blocks.c	/^gdb_block_position (block_number, pos)/ ;" function 14 { read_a_source_file s_gdbblock }	{ as_warn find_create gdb_block }
gdb_emit		gdb.c	/^gdb_emit (filename)	\/* Append GDB symbols to objec/ ;" function 13 { write_object_file }	{ gdb_block_emit gdb_lines_emit gdb_symbols_emit output_file_append size where }
gdb_end		gdb.c	/^gdb_end()/ ;" function 6 { write_object_file }	{ gdb_file_end }
gdb_file_begin		gdb-file.c	/^gdb_file_begin ()/ ;" function 3 { gdb_begin }	{ }
gdb_file_end		gdb-file.c	/^gdb_file_end()/ ;" function 3 { gdb_end }	{ }
gdb_file_read		gdb-file.c	/^gdb_file_read (buffer, filename)/ ;" function 20 { gdb_begin }	{ as_fatal as_perror file file_len register }
gdb_file_size		gdb-file.c	/^gdb_file_size (filename)/ ;" function 17 { gdb_begin }	{ NULL as_perror file file_len }
gdb_line		gdb-lines.c	/^gdb_line(file_number,lineno)/ ;" function 19 { s_gdbline }	{ MAX_LINES_PER_VECTOR add_file add_vector first_file frag_now frags g_line g_line_file g_line_vector line obstack_next_free v }
gdb_line_tab		gdb-lines.c	/^gdb_line_tab(file_number,offset)/ ;" function 13 { s_gdblinetab }	{ add_file as_warn first_file g_line_file }
gdb_lines_emit		gdb-lines.c	/^gdb_lines_emit()/ ;" function 65 { gdb_emit gdb_mach_O_emit }	{ as_warn first_file g_line g_line_file g_line_vector gdb_alter v }
gdb_mach_O_emit		gdb.c	/^gdb_mach_O_emit(sizeaddr)/ ;" function 13 { write_object_file }	{ gdb_block_emit gdb_lines_emit gdb_symbols_emit size where }
gdb_symbol		gdb-symbols.c	/^struct gdb_symbol		\/* 1 fixup request. *\// ;" global 1 { }	{ }
gdb_symbolS		gdb-symbols.c	/^typedef struct gdb_symbol gdb_symbolS;/ ;" typedef 1 { gdb_symbols_emit gdb_symbols_fixup }	{ }
gdb_symbol_file_name		as.c	/^static char * gdb_symbol_file_name;/ ;" global 1 { Mas }	{ }
gdb_symbols_begin		gdb-symbols.c	/^gdb_symbols_begin ()/ ;" function 5 { gdb_begin }	{ new_sfg root }
gdb_symbols_emit		gdb-symbols.c	/^gdb_symbols_emit ()		\/* Append GDB symbols to obje/ ;" function 24 { gdb_emit gdb_mach_O_emit }	{ SYM_GROUP gdb_alter gdb_symbolS register root sy_value symbol_fixup_groupS used }
gdb_symbols_fixup		gdb-symbols.c	/^gdb_symbols_fixup (sy, offset)	\/* into the GDB sym/ ;" function 17 { read_a_source_file s_gdbsym }	{ gdb_symbolS know new_sfg p register root symbol_fixup_groupS used }
gen_to_words		atof-m68k.c	/^gen_to_words(a,b,c)/ ;" function 7 { convert_iif get_num m68_ip }	{ abort as_where }
generic_bignum		expr.c	/^LITTLENUM_TYPE	generic_bignum [SIZE_OF_LARGE_NUMBE/ ;" global 1 { convert_iif m68_ip md_assemble operand }	{ }
generic_buffer		expr.c	/^LITTLENUM_TYPE	generic_buffer [6];	\/* JF this is a/ ;" global 1 { }	{ }
generic_floating_point_number		expr.c	/^FLONUM_TYPE	generic_floating_point_number =/ ;" global 8 { md_assemble operand }	{ }
getExpression		i860.c	/^getExpression(str)/ ;" function 30 { i860_ip }	{ expr_end expression input_line_pointer seg segT the_insn }
get_absolute_expression		read.c	/^get_absolute_expression ()/ ;" function 15 { get_absolute_expression_and_terminator s_align s_comm s_data s_desc s_even s_fill s_gdbbeg s_gdbblock s_gdbend s_gdbline s_gdblinetab s_gdbsym s_i860_align s_lcomm s_line s_org s_space s_text stab }	{ as_warn expression expressionS register segT }
get_absolute_expression_and_terminator		read.c	/^get_absolute_expression_and_terminator( val_pointe/ ;" function 6 { s_fill s_gdbblock s_gdbline s_gdblinetab s_space stab }	{ get_absolute_expression input_line_pointer }
get_addr_mode		ns32k.c	/^int get_addr_mode(ptr,addr_modeP)/ ;" function 91 { encode_operand }	{ addr_mode addr_modeP as_warn desc disp_test evaluate_expr exprP i register }
get_known_segmented_expression		read.c	/^get_known_segmented_expression ( expP )/ ;" function 29 { equals s_org s_set }	{ NULL as_warn get_segmented_expression know register segT sy_name }
get_num		m68k.c	/^get_num(exp,ok)/ ;" function 162 { m68_ip }	{ LITTLENUM_TYPE abort adds as_warn expression gen_to_words input_line_pointer isbyte isword offs seg subs }
get_objc_section_bounds		write.c	/^get_objc_section_bounds ()/ ;" function 88 { write_object_file }	{ NULL OBJC_MOD OBJC_SEL OBJC_SYM as_fatal as_warn data_frag_root data_last_frag mod_section register sel_section size sy_value sym_section symbolS symbol_table_lookup text_last_frag }
get_regs		m68k.c	/^get_regs(i,str,opP)/ ;" function 52 { m68k_ip_op }	{ ADD_REG DATA FAIL FPC FPI FPREG FPS OK i m68k_reg_parse }
get_segmented_expression		read.c	/^get_segmented_expression ( expP )/ ;" function 14 { get_known_segmented_expression }	{ as_warn expression register segT }
get_symbol_end		expr.c	/^get_symbol_end()/ ;" function 10 { operand read_a_source_file s_comm s_desc s_gdbsym s_globl s_lcomm s_lsym s_reference s_set }	{ input_line_pointer is_part_of_name register }
getone		m68k.c	/^#define getone(x)	((((x)->m_opcode)>>16)&0xffff)/ ;" macro 1 { m68_ip }	{ }
gettwo		m68k.c	/^#define gettwo(x)	(((x)->m_opcode)&0xffff)/ ;" macro 1 { m68_ip }	{ }
grow_bignum		read.c	/^grow_bignum()			\/* Extend bignum by 1 char. *\// ;" function 13 { big_cons }	{ bignum_high bignum_limit bignum_low register xrealloc }
gs		i386-opcode.h	/^seg_entry gs = { "gs", 0x65 };/ ;" global 1 { i386_operand }	{ }
h		hash.c	/^char * h;			\/* points to curent hash_control *\// ;" global 1 { Mhash _obstack_begin _obstack_free _obstack_newchunk hash_code obstack_1grow obstack_1grow_fast obstack_alignment_mask obstack_alloc obstack_base obstack_begin obstack_blank obstack_blank_fast obstack_chunk_size obstack_copy obstack_copy0 obstack_finish obstack_free obstack_grow obstack_grow0 obstack_init obstack_next_free obstack_object_size obstack_room whattable }	{ }
hashH		hash.h	/^#define hashH/ ;" macro 1 { }	{ }
hash_apply		hash.c	/^hash_apply(handle,function)/ ;" function 17 { Mhash }	{ NULL hash_entry islive register }
hash_ask		hash.c	/^hash_ask(handle,string,access)/ ;" function 67 { hash_delete hash_find hash_insert hash_jam hash_replace }	{ DELETED FALSE TRUE hash_code hash_entry hash_found register }
hash_code		hash.c	/^hash_code(handle,string)/ ;" function 17 { hash_ask }	{ h register }
hash_control		hash.h	/^struct hash_control/ ;" struct 13 { Mhash hash_new }	{ }
hash_delete		hash.c	/^hash_delete(handle,string)/ ;" function 26 { Mhash }	{ DELETED NULL STAT__WRITE hash_ask hash_entry hash_found register }
hash_die		hash.c	/^hash_die(handle)/ ;" function 6 { Mhash }	{ }
hash_entry		hash.h	/^struct hash_entry/ ;" struct 8 { hash_apply hash_ask hash_delete hash_find hash_grow hash_insert hash_jam hash_new hash_replace }	{ }
hash_find		hash.c	/^hash_find(handle,string)	\/* return char* or NULL */ ;" function 18 { Mhash i860_ip m68_ip md_assemble md_begin parse parse_register read_a_source_file symbol_find vip }	{ NULL STAT__READ hash_ask hash_entry hash_found register }
hash_found		hash.c	/^static char hash_found;		\/* returned by hash_ask()/ ;" global 1 { hash_ask hash_delete hash_find hash_insert hash_jam hash_replace }	{ }
hash_grow		hash.c	/^hash_grow(handle)			\/* make a hash table grow *\// ;" function 93 { hash_insert hash_jam }	{ DELETED NULL hash_entry hash_jam register xmalloc }
hash_insert		hash.c	/^hash_insert(handle,string,value)/ ;" function 29 { Mhash md_begin pobegin vip_begin }	{ STAT__WRITE hash_ask hash_entry hash_found hash_grow register value }
hash_jam		hash.c	/^hash_jam(handle,string,value)/ ;" function 25 { Mhash hash_grow symbol_table_insert }	{ STAT__WRITE hash_ask hash_entry hash_found hash_grow register value }
hash_new		hash.c	/^hash_new()			\/* create a new hash table *\// ;" function 43 { Mhash md_begin pobegin symbol_begin vip_begin }	{ NULL START_POWER STATLENGTH hash_control hash_entry register }
hash_replace		hash.c	/^hash_replace(handle,string,value)/ ;" function 21 { Mhash }	{ NULL STAT__WRITE hash_ask hash_entry hash_found register value }
hash_say		hash.c	/^hash_say(handle,buffer,bufsiz)/ ;" function 19 { Mhash }	{ STATLENGTH min register }
hashtable		hash.c	/^char * hashtable[TABLES];	\/* we test many hash tab/ ;" global 1 { Mhash whattable }	{ }
header		atom.c	/^struct mach_header		header;/ ;" global 1 { a_out_to_mach_O }	{ }
hex_value		hex-value.c	/^hex_value [256] = {		\/* for fast ASCII -> binary */ ;" global 18 { big_cons operand }	{ }
highest_block_number_seen		gdb-blocks.c	/^static long int		highest_block_number_seen;/ ;" global 1 { find_create gdb_block_begin gdb_block_emit }	{ }
i		i386.c	/^static i386_insn i;/ ;" global 1 { Flush_VMS_Object_Record_Buffer VMS_Case_Hack_Symbol VMS_Check_For_Main VMS_Modify_Psect_Attributes VMS_Store_Immediate_Data VMS_TBT_Source_File VMS_write_object_file Write_VMS_MHD_Records _obstack_newchunk addr_mode atof_m68k convert_iif encode_operand get_addr_mode get_regs i386_operand i860_ip list_search m68k_ip_op md_assemble md_begin optlist packmantissa parse pi pte s_i860_align try_index }	{ }
i386_insn		i386.h	/^typedef struct {/ ;" typedef 49 { }	{ }
i386_operand		i386.c	/^int i386_operand (operand_string)/ ;" function 296 { md_assemble }	{ ABSOLUTE_PREFIX Abs BYTE_OPCODE_SUFFIX BaseIndex DWORD_OPCODE_SUFFIX Disp Disp32 END_STRING_AND_SAVE FALSE IMMEDIATE_PREFIX Imm Imm32 JumpAbsolute MAX_IMMEDIATE_OPERANDS MAX_MEMORY_OPERANDS Mem16 Mem32 Mem8 REGISTER_PREFIX RESTORE_END_STRING Reg Reg32 SMALLEST_DISP_TYPE SMALLEST_IMM_TYPE SReg2 SReg3 TRUE WORD_OPCODE_SUFFIX as_warn cs disp_expressions ds es esp expression expressionS fs gs i im_expressions input_line_pointer is_digit_char is_identifier_char ordinal_names output_invalid parse_register reg_entry register seg segT ss symbolS uint }
i386_optab		i386-opcode.h	/^template i386_optab[] = {/ ;" global 639 { md_begin }	{ }
i386_optab_end		i386-opcode.h	/^template *i386_optab_end / ;" global 2 { md_begin }	{ }
i386_prefixtab		i386-opcode.h	/^prefix_entry i386_prefixtab[] = {/ ;" global 16 { md_begin }	{ }
i386_prefixtab_end		i386-opcode.h	/^prefix_entry *i386_prefixtab_end/ ;" global 2 { md_begin }	{ }
i386_regtab		i386-opcode.h	/^reg_entry i386_regtab[] = {/ ;" global 28 { md_begin }	{ }
i386_regtab_end		i386-opcode.h	/^reg_entry *i386_regtab_end/ ;" global 2 { md_begin }	{ }
i860_ip		i860.c	/^i860_ip(str)/ ;" function 455 { md_assemble }	{ DUAL_INSN_MODE_BIT FALSE I860_errors IS_LOGOP NULL OP_FNOP OP_NOP OP_PREFIX_MASK PREFIX_FPU SET_RD SET_RS1 SET_RS2 TRUE abort as_warn bzero const dual_insn_mode expr_end getExpression hash_find i i860_opcode insn_count op_hash the_insn }
i860_it		i860.c	/^struct i860_it {/ ;" struct 8 { }	{ }
i860_opcode		i860-opcode.h	/^struct i860_opcode/ ;" struct 9 { i860_ip }	{ }
i860_opcodes		i860-opcode.h	/^static const struct i860_opcode i860_opcodes[] =/ ;" global 469 { NUMOPCODES md_begin }	{ }
identifier_chars		i386.c	/^static char identifier_chars[256];/ ;" global 1 { is_identifier_char md_begin }	{ }
ignore_rest_of_line		read.c	/^ignore_rest_of_line()		\/* For suspect lines: gives/ ;" function 15 { demand_copy_string demand_empty_rest_of_line float_cons read_a_source_file s_comm s_desc s_fill s_gdbblock s_gdbline s_gdblinetab s_gdbsym s_lcomm s_lsym s_set s_space stab }	{ as_warn buffer_limit input_line_pointer is_end_of_line know }
iif		ns32k.c	/^struct int_ins_form iif;/ ;" global 1 { IIF convert_iif encode_operand parse }	{ }
iif_entryT		ns32k.c	/^typedef struct {/ ;" typedef 13 { }	{ }
im_expressions		i386.c	/^static expressionS disp_expressions[2], im_express/ ;" global 1 { i386_operand md_assemble }	{ }
in_buf		input-file.c	/^static char in_buf[BUFFER_SIZE];/ ;" global 1 { input_file_open }	{ }
index		as.h	/^#define index strchr/ ;" macro 1 { atof_generic input_file_open m68_ip m68k_ip_op md_assemble notend operand pi read_a_source_file vip_op }	{ }
input_file_begin		input-file.c	/^input_file_begin ()/ ;" function 5 { input_scrub_begin }	{ f_in }
input_file_buffer_size		input-file.c	/^input_file_buffer_size ()/ ;" function 4 { input_scrub_begin }	{ BUFFER_SIZE }
input_file_end		input-file.c	/^input_file_end ()/ ;" function 3 { input_scrub_end }	{ }
input_file_give_next_buffer		input-file.c	/^input_file_give_next_buffer (where)/ ;" function 49 { input_scrub_next_buffer }	{ BUFFER_SIZE as_perror do_scrub_next_char f_in file_name p preprocess register scrub_file scrub_from_file scrub_to_file size where }
input_file_is_open		input-file.c	/^input_file_is_open ()/ ;" function 5 { as_perror as_where }	{ f_in }
input_file_open		input-file.c	/^input_file_open (filename, preprocess, debugging)/ ;" function 82 { input_scrub_new_file }	{ PREPROCESSOR as_perror as_warn file_name preprocess }
input_line_pointer		m68k.c	/^char *input_line_pointer;/ ;" global 1 { SKIP_WHITESPACE as_howmuch big_cons cons demand_copy_string demand_empty_rest_of_line discard_rest_of_line dummy equals evaluate_expr expr float_cons getExpression get_absolute_expression_and_terminator get_num get_symbol_end i386_operand ignore_rest_of_line md_assemble md_atof next_char_of_string operand read_a_source_file s_align s_comm s_desc s_fill s_gdbblock s_gdbsym s_globl s_i860_align s_lcomm s_lsym s_org s_reference s_set s_space stab stringer }	{ }
input_scrub_begin		input-scrub.c	/^input_scrub_begin ()/ ;" function 18 { Mas }	{ AFTER_SIZE AFTER_STRING BEFORE_SIZE BEFORE_STRING NULL bcopy buffer_length buffer_start do_scrub_begin input_file_begin input_file_buffer_size know logical_input_file logical_input_line physical_input_file xmalloc }
input_scrub_end		input-scrub.c	/^input_scrub_end ()/ ;" function 4 { Mas }	{ input_file_end }
input_scrub_new_file		input-scrub.c	/^input_scrub_new_file (filename)/ ;" function 10 { perform_an_assembly_pass }	{ BEFORE_SIZE buffer_start flagseen input_file_open partial_size physical_input_file physical_input_line }
input_scrub_next_buffer		input-scrub.c	/^input_scrub_next_buffer (bufp)/ ;" function 80 { read_a_source_file }	{ AFTER_SIZE AFTER_STRING BEFORE_SIZE as_fatal as_warn bcopy buffer_start input_file_give_next_buffer p partial_size partial_where preprocess register save_source }
insn_count		i860.c	/^static int insn_count;	\/* Track insns assembled, a/ ;" global 1 { i860_ip md_assemble md_begin }	{ }
insop		m68k.c	/^#define insop(w)	{int z;\\/ ;" macro 1 { m68_ip }	{ the_ins }
inst_hash_handle		ns32k.c	/^struct hash_control *inst_hash_handle;/ ;" global 1 { md_begin parse }	{ }
install_gen_operand		m68k.c	/^install_gen_operand(mode,val)/ ;" function 24 { m68_ip }	{ abort the_ins }
install_operand		m68k.c	/^install_operand(mode,val)/ ;" function 73 { m68_ip }	{ abort the_ins }
int		obstack.c	/^int (obstack_object_size) (obstack)/ ;" function 5 { }	{ obstack obstack_object_size }
int_ins_form		ns32k.c	/^struct int_ins_form {/ ;" struct 4 { }	{ }
is_digit_char		i386.c	/^#define is_digit_char(x) (digit_chars[(unsigned ch/ ;" macro 1 { i386_operand }	{ digit_chars }
is_end_of_line		read.c	/^char is_end_of_line [256] = {/ ;" global 15 { demand_empty_rest_of_line discard_rest_of_line ignore_rest_of_line is_it_end_of_statement read_a_source_file }	{ }
is_identifier_char		i386.c	/^#define is_identifier_char(x) (identifier_chars[(u/ ;" macro 1 { i386_operand }	{ identifier_chars }
is_it_end_of_statement		read.c	/^is_it_end_of_statement()/ ;" function 5 { big_cons cons float_cons stringer }	{ SKIP_WHITESPACE is_end_of_line }
is_label		m68k.c	/^is_label(str)/ ;" function 11 { Mm68k }	{ }
is_name_beginner		read.h	/^#define is_name_beginner(c)     ( lex_type[c] & LE/ ;" macro 1 { operand read_a_source_file }	{ LEX_BEGIN_NAME }
is_opcode_char		i386.c	/^#define is_opcode_char(x) (opcode_chars[(unsigned / ;" macro 1 { md_assemble }	{ opcode_chars }
is_operand_char		i386.c	/^#define is_operand_char(x) (operand_chars[(unsigne/ ;" macro 1 { md_assemble }	{ operand_chars }
is_part_of_name		read.h	/^#define is_part_of_name(c)      ( lex_type[c] & LE/ ;" macro 1 { get_symbol_end operand }	{ LEX_NAME }
is_register_char		i386.c	/^#define is_register_char(x) (register_chars[(unsig/ ;" macro 1 { parse_register }	{ register_chars }
is_space_char		i386.c	/^#define is_space_char(x) (space_chars[(unsigned ch/ ;" macro 1 { md_assemble }	{ space_chars }
isbyte		m68k.c	/^#define isbyte(x)	((x)>=-128 && (x)<=255)/ ;" macro 1 { get_num m68_ip }	{ }
isdnrange		write.c	/^isdnrange(f1,f2)/ ;" function 10 { relax_segment }	{ }
islive		hash.c	/^#define islive(ptr) (ptr->hash_string && ptr->hash/ ;" macro 1 { hash_apply }	{ DELETED }
islong		m68k.c	/^#define islong(x)	(1)/ ;" macro 1 { }	{ }
isoctal		i860.c	/^#define isoctal(c)  octal[c]/ ;" macro 1 { }	{ octal }
issbyte		m68k.c	/^#define issbyte(x)	((x)>=-128 && (x)<=127)/ ;" macro 1 { m68_ip md_convert_frag }	{ }
issword		m68k.c	/^#define issword(x)	((x)>=-32768 && (x)<=32767)/ ;" macro 1 { m68_ip md_convert_frag }	{ }
isubyte		m68k.c	/^#define isubyte(x)	((x)>=0 && (x)<=255)/ ;" macro 1 { }	{ }
isuword		m68k.c	/^#define isuword(x)	((x)>=0 && (x)<=65535)/ ;" macro 1 { }	{ }
isvar		m68k.c	/^#define isvar(exp)	((exp) && (adds(exp) || subs(ex/ ;" macro 1 { m68_ip }	{ adds subs }
isword		m68k.c	/^#define isword(x)	((x)>=-32768 && (x)<=65535)/ ;" macro 1 { get_num m68_ip }	{ }
know		as.h	/^#define know(p) ASSERT(p)	\/* know() is less ugly t/ ;" macro 1 { big_cons colon cons discard_rest_of_line expr expr_part fixup_segment float_cons frag_new gdb_symbols_fixup get_known_segmented_expression ignore_rest_of_line input_scrub_begin local_label_name md_assemble md_convert_frag operand pseudo_set read_a_source_file relax_segment s_comm s_lsym stringer subseg_change subseg_new subsegs_begin symbol_table_insert write_object_file }	{ ASSERT p }
l_mask		ns32k.c	/^static unsigned long l_mask[]={	0xffffffff, 0xffff/ ;" global 9 { md_number_to_field }	{ }
lex		app.c	/^static char	lex [256];/ ;" global 1 { IS_COMMENT IS_LINE_COMMENT IS_LINE_SEPERATOR IS_SYMBOL_COMPONENT IS_WHITESPACE do_scrub_begin }	{ }
line		gdb-lines.c	/^struct line/ ;" struct 6 { as_where gdb_line md_assemble parse pi }	{ }
line_comment_chars		app.c	/^char line_comment_chars[] = "#";/ ;" global 1 { do_scrub_begin read_a_source_file }	{ }
line_numberT		input-scrub.c	/^typedef unsigned int line_numberT;	\/* 1-origin lin/ ;" typedef 1 { as_where }	{ }
list_search		ns32k.c	/^int list_search(str,optionP,default_map)/ ;" function 16 { encode_operand }	{ as_warn i register }
local_bss_counter		symbols.c	/^unsigned int local_bss_counter;/ ;" global 1 { VMS_write_object_file s_lcomm symbol_begin write_object_file }	{ }
local_colon		symbols.c	/^local_colon (n)/ ;" function 6 { read_a_source_file }	{ colon local_label_counter local_label_name }
local_label_countT		symbols.c	/^typedef short unsigned int/ ;" typedef 3 { }	{ }
local_label_counter		symbols.c	/^local_label_counter[10];/ ;" global 1 { local_colon local_label_name symbol_begin }	{ }
local_label_name		symbols.c	/^local_label_name(n, augend)/ ;" function 34 { local_colon operand }	{ know local_label_counter p register symbol_name_build }
logical_input_file		input-scrub.c	/^     *		logical_input_file;/ ;" global 1 { as_where input_scrub_begin new_logical_line }	{ }
logical_input_line		input-scrub.c	/^		logical_input_line;/ ;" global 1 { as_where bump_line_counters input_scrub_begin new_logical_line }	{ }
lose		as.c	/^lose()/ ;" function 4 { colon }	{ as_fatal myname }
m68_incant		m68k.c	/^struct m68_incant {/ ;" struct 7 { m68_ip md_begin }	{ }
m68_ip		m68k.c	/^m68_ip (instring)/ ;" function 1102 { Mm68k md_assemble }	{ ABSL AC ADDR ADEC AINC AINDR AINDX AMIND AOFF APODX APRDX AREG BAC BAD CAL CCR COPNUM CRP DATA DFC DREG DRP FAIL FPC FPI FPREG FPS IMMED LITTLENUM_TYPE MSCR MSP NULL PC PCSR PSR REGLST SCC SFC SR SRP TAB TC USP VAL ZPC abort add_fix add_frag adds addword as_fatal as_warn atof_m68k bzero crack_operand flagseen gen_to_words generic_bignum get_num getone (etc) }
m68_it		m68k.c	/^struct m68_it {/ ;" struct 31 { Mm68k }	{ }
m68k_exp		m68k.c	/^struct m68k_exp {/ ;" struct 6 { }	{ }
m68k_ip_op		m68k.c	/^m68k_ip_op(str,opP)/ ;" function 199 { Mm68k crack_operand }	{ ABSL ADDR ADEC AINC AINDR AINDX AMIND AOFF APODX APRDX AREG DATA DREG FAIL IMMED MSCR OK PC REGLST ZPC abort add_exp get_regs i index m68k_reg_parse try_index }
m68k_op		m68k.c	/^struct m68k_op {/ ;" struct 10 { Mm68k m68_ip }	{ }
m68k_opcode		m68k-opcode.h	/^struct m68k_opcode/ ;" struct 8 { md_begin }	{ }
m68k_opcodes		m68k-opcode.h	/^struct m68k_opcode m68k_opcodes[] =/ ;" global 1278 { md_begin }	{ }
m68k_reg_parse		m68k.c	/^m68k_reg_parse(ccp)/ ;" function 200 { get_regs m68_ip m68k_ip_op try_index }	{ AC ADDR BAC BAD CAAR CACR CAL CCR CRP DATA DFC DRP FAIL FPC FPI FPREG FPS ISP MSP PC PCSR PSR SCC SFC SR SRP TC USP VAL VBR ZPC mklower register }
main		app.c	/^main()/ ;" function 8 { }	{ do_scrub_next_char }
make		hash.c	/^Pani!! Please make #include "stat.h" agree with pr/ ;" global 1 { }	{ }
md_assemble		i386.c	/^void md_assemble (line)/ ;" function 739 { read_a_source_file }	{ Abs16 Abs8 BYTE BYTE_OPCODE_SUFFIX BaseIndex COND_JUMP CONSISTENT_REGISTER_MATCH Control DWORD_OPCODE_SUFFIX Debug Disp Disp16 Disp32 Disp8 EBP_REG_NUM ENCODE_RELAX_STATE END_OF_INSN END_STRING_AND_SAVE ESCAPE_TO_TWO_BYTE_ADDRESSING ESP_REG_NUM FALSE FITS_IN_SIGNED_BYTE FITS_IN_SIGNED_WORD FITS_IN_UNSIGNED_BYTE FITS_IN_UNSIGNED_WORD FloatReg IS_STRING_INSTRUCTION Imm1 Imm16 Imm32 Imm8 ImplicitRegister JUMP_PC_RELATIVE MATCH MAX_OPERANDS MAX_PREFIXES MODE_FROM_DISP_SIZE Mem NO_BASE_REGISTER NO_INDEX_REGISTER POP_SEG_SHORT PREFIX_SEPERATOR REPE REPNE RESTORE_END_STRING Reg SReg2 SReg3 TRUE TWO_BYTE_OPCODE_ESCAPE Test UNCOND_JUMP WORD_OPCODE_SUFFIX WORD_PREFIX_OPCODE as_warn bcopy bzero disp_expressions ebp esp (etc) }
md_atof		i386.c	/^md_atof(type,litP,sizeP)/ ;" function 44 { float_cons }	{ LITTLENUM_TYPE input_line_pointer md_number_to_chars }
md_begin		i386.c	/^void md_begin ()/ ;" function 105 { Mas }	{ PREFIX_SEPERATOR as_fatal bzero digit_chars ebp esp hash_find hash_insert hash_new i386_optab i386_optab_end i386_prefixtab i386_prefixtab_end i386_regtab i386_regtab_end identifier_chars name o obstack_begin obstack_finish obstack_grow obstack_next_free op_hash opcode_chars operand_chars operand_special_chars prefix_entry prefix_hash reg_entry reg_hash register register_chars space_chars template templates xmalloc }
md_chars_to_number		i386.c	/^md_chars_to_number (con, nbytes)/ ;" function 12 { md_assemble }	{ BITS_PER_CHAR }
md_convert_frag		i386.c	/^md_convert_frag (fragP)/ ;" function 66 { write_object_file }	{ BAD_CASE BYTE COND_JUMP DWORD ENCODE_RELAX_STATE SIZE_FROM_RELAX_STATE TWO_BYTE_OPCODE_ESCAPE UNCOND_JUMP WORD WORD_PREFIX_OPCODE md_number_to_chars register sy_value uchar uint }
md_create_long_jump		i386.c	/^void md_create_long_jump (ptr, from_addr, to_addr,/ ;" function 20 { write_object_file }	{ fix_new flagseen frag md_number_to_chars sy_value symbolS }
md_create_short_jump		i386.c	/^void md_create_short_jump(ptr, from_addr, to_addr)/ ;" function 10 { write_object_file }	{ md_number_to_chars }
md_end		i386.c	/^void md_end() {}		\/* not much to do here. *\// ;" function 1 { Mas }	{ }
md_estimate_size_before_relax		i386.c	/^md_estimate_size_before_relax (fragP, segment_type/ ;" function 39 { relax_segment }	{ JUMP_PC_RELATIVE TWO_BYTE_OPCODE_ESCAPE fix_new frag_wane register sy_type symbolS uchar }
md_insn_to_chars		i860.c	/^md_insn_to_chars(buf,val,n)/ ;" function 27 { md_assemble }	{ abort }
md_long_jump_size		i386.c	/^int md_long_jump_size  = 5;	\/* size of dword displ/ ;" global 1 { colon relax_segment write_object_file }	{ }
md_number_to_chars		i386.c	/^md_number_to_chars (con, value, nbytes)/ ;" function 28 { cons convert_iif fixup_segment gdb_alter md_assemble md_atof md_convert_frag md_create_long_jump md_create_short_jump md_ri_to_chars s_fill vip write_object_file }	{ BAD_CASE answer bcopy p register value }
md_number_to_disp		i386.c	/^md_number_to_disp (con, value, nbytes)/ ;" function 28 { convert_iif fixup_segment md_convert_frag }	{ BAD_CASE answer bcopy p register value }
md_number_to_field		i386.c	/^md_number_to_field (con, value, nbytes)/ ;" function 28 { fixup_segment }	{ BAD_CASE answer bcopy p register value }
md_number_to_imm		i386.c	/^md_number_to_imm (con, value, nbytes)/ ;" function 28 { convert_iif fixup_segment }	{ BAD_CASE answer bcopy p register value }
md_parse_option		i860.c	/^md_parse_option(argP,cntP,vecP)/ ;" function 7 { }	{ }
md_pseudo_table		i386.c	/^pseudo_typeS md_pseudo_table[] = {/ ;" global 9 { pobegin }	{ }
md_relax_table		i386.c	/^relax_typeS md_relax_table[] = {/ ;" global 32 { relax_segment }	{ }
md_ri_to_chars		i386.c	/^void md_ri_to_chars(ri_p, ri)/ ;" function 16 { emit_relocations }	{ bcopy md_number_to_chars }
md_short_jump_size		i386.c	/^int md_short_jump_size = 2;	\/* size of byte displa/ ;" global 1 { colon relax_segment write_object_file }	{ }
means		vax.c	/^means 'I am an imaginary instruction'./ ;" global 1 { }	{ }
min		hash.c	/^#define min(a, b)	((a) < (b) ? (a) : (b))/ ;" macro 1 { bit_fix_new hash_say md_assemble }	{ }
minus_1		flonum-const.c	/^static LITTLENUM_TYPE minus_1 [] = {/ ;" global 3 { }	{ }
minus_10		flonum-const.c	/^static LITTLENUM_TYPE minus_10 [] = {/ ;" global 4 { }	{ }
minus_11		flonum-const.c	/^static LITTLENUM_TYPE minus_11 [] = {/ ;" global 4 { }	{ }
minus_2		flonum-const.c	/^static LITTLENUM_TYPE minus_2 [] = {/ ;" global 3 { }	{ }
minus_3		flonum-const.c	/^static LITTLENUM_TYPE minus_3 [] = {/ ;" global 3 { }	{ }
minus_4		flonum-const.c	/^static LITTLENUM_TYPE minus_4 [] = {/ ;" global 3 { }	{ }
minus_5		flonum-const.c	/^static LITTLENUM_TYPE minus_5 [] = {/ ;" global 3 { }	{ }
minus_6		flonum-const.c	/^static LITTLENUM_TYPE minus_6 [] = {/ ;" global 3 { }	{ }
minus_7		flonum-const.c	/^static LITTLENUM_TYPE minus_7 [] = {/ ;" global 2 { }	{ }
minus_8		flonum-const.c	/^static LITTLENUM_TYPE minus_8 [] = {/ ;" global 3 { }	{ }
minus_9		flonum-const.c	/^static LITTLENUM_TYPE minus_9 [] = {/ ;" global 4 { }	{ }
mklower		m68k.c	/^#define mklower(c) (mklower_table[(unsigned char)(/ ;" macro 1 { m68k_reg_parse try_index }	{ mklower_table }
mklower_table		m68k.c	/^static char mklower_table[256];/ ;" global 1 { md_begin mklower }	{ }
mmureg		ns32k.c	/^struct option mmureg[]= \/* lmr smr *\// ;" global 11 { encode_operand }	{ }
mod_section		atom.c	/^struct section			mod_section;	\/* __OBJC, __module_/ ;" global 1 { a_out_to_mach_O emit_relocations get_objc_section_bounds }	{ }
modrm_byte		i386.h	/^typedef struct {/ ;" typedef 5 { }	{ }
mumble		vax.c	/^mumble(text,value)/ ;" function 11 { Mvax }	{ value }
my_displen		vax.c	/^char	my_displen[200];/ ;" global 1 { Mvax }	{ }
my_immediate		vax.c	/^char	my_immediate[200];/ ;" global 1 { Mvax }	{ }
my_indirect		vax.c	/^char	my_indirect[200];/ ;" global 1 { Mvax }	{ }
my_operand_length		vax.c	/^int	my_operand_length;/ ;" global 1 { Mvax }	{ }
myaccess		vax.c	/^char   myaccess;/ ;" global 1 { Mvax }	{ }
mybug		vax.c	/^char *		mybug;		\/* "" or an internal logic diagnos/ ;" global 1 { Mvax }	{ }
mycount		vax.c	/^int		mycount;	\/* number of operands *\// ;" global 1 { Mvax }	{ }
myerr		vax.c	/^char * myerr;/ ;" global 1 { Mvax }	{ }
myleft		vax.c	/^char * myleft;/ ;" global 1 { Mvax }	{ }
mylen		vax.c	/^char   mylen;/ ;" global 1 { Mvax }	{ }
mymode		vax.c	/^char   mymode;/ ;" global 1 { Mvax }	{ }
myname		as.c	/^char *myname;		\/* argv[0] *\// ;" global 1 { Mas lose }	{ }
myndx		vax.c	/^char   myndx;/ ;" global 1 { Mvax }	{ }
myreg		vax.c	/^char   myreg;/ ;" global 1 { Mvax }	{ }
myright		vax.c	/^char * myright;/ ;" global 1 { Mvax }	{ }
mysynth		vax.c	/^int		mysynth;	\/* TRUE means want synthetic opcodes/ ;" global 1 { Mvax }	{ }
myvit		vax.c	/^struct vit	myvit;		\/* build an exploded vax instru/ ;" global 1 { Mvax }	{ }
myvop		vax.c	/^struct vop *	myvop;		\/* scan operands from myvit */ ;" global 1 { Mvax }	{ }
mywidth		vax.c	/^char   mywidth;/ ;" global 1 { Mvax }	{ }
mywrn		vax.c	/^char * mywrn;/ ;" global 1 { Mvax }	{ }
name		hash.c	/^char *  name;/ ;" global 1 { Mhash md_begin operand output_file_create read_a_source_file s_comm s_desc s_gdbsym s_globl s_lcomm s_lsym s_reference s_set symbol_find symbol_find_or_make symbol_new symbol_table_lookup vot_name write_object_file }	{ }
nbytes_r_length		write.c	/^nbytes_r_length [] = {/ ;" global 3 { emit_relocations }	{ }
need_pass_2		as.h	/^COMMON int	need_pass_2;	\/* TRUE if we need a secon/ ;" global 1 { big_cons cons equals expr float_cons md_assemble perform_an_assembly_pass pseudo_set s_align s_even s_fill s_i860_align s_org s_set s_space }	{ }
new_0		gdb-blocks.c	/^new_0 ()/ ;" function 8 { find }	{ bzero node_0_T register xmalloc }
new_1		gdb-blocks.c	/^new_1 ()/ ;" function 8 { find }	{ bzero node_1_T register xmalloc }
new_2		gdb-blocks.c	/^new_2 ()/ ;" function 8 { gdb_block_begin }	{ bzero node_2_T register xmalloc }
new_broken_words		read.c	/^int new_broken_words = 0;/ ;" global 1 { colon cons }	{ }
new_logical_line		input-scrub.c	/^new_logical_line (fname, line_number)/ ;" function 13 { s_file s_line }	{ logical_input_file logical_input_line }
new_sfg		gdb-symbols.c	/^new_sfg ()/ ;" function 11 { gdb_symbols_begin gdb_symbols_fixup }	{ SYM_GROUP root symbol_fixup_groupS used xmalloc }
next_char_of_string		read.c	/^next_char_of_string ()/ ;" function 78 { demand_copy_string stringer }	{ as_warn input_line_pointer number register }
next_object_file_charP		write.c	/^char *		next_object_file_charP;	\/* Tracks object f/ ;" global 1 { emit_relocations write_object_file }	{ }
node_0_T		gdb-blocks.c	/^typedef struct gdb_block	node_0_T	[1 << LOG_2_Z0];/ ;" typedef 1 { find new_0 }	{ }
node_1_T		gdb-blocks.c	/^typedef node_0_T *		node_1_T	[1 << LOG_2_Z1];/ ;" typedef 1 { find new_1 }	{ }
node_2_T		gdb-blocks.c	/^typedef node_1_T *		node_2_T	[1 << LOG_2_Z2];/ ;" typedef 1 { new_2 }	{ }
notend		m68k.c	/^#define notend(s) ( !(notend_table[(unsigned char)/ ;" macro 1 { crack_operand }	{ alt_notend_table notend_table }
notend_table		m68k.c	/^static char notend_table[256];/ ;" global 1 { md_begin notend }	{ }
notes		symbols.c	/^struct obstack	notes;/ ;" global 1 { bit_fix_new demand_copy_string fix_new fix_new_ns32k read_begin symbol_new }	{ }
now_seg		as.h	/^COMMON segT			now_seg;/ ;" global 1 { equals m68_ip md_assemble operand s_i860_align s_org s_set subseg_change subseg_new }	{ }
now_subseg		as.h	/^COMMON subsegT			now_subseg;/ ;" global 1 { subseg_change subseg_new subsegs_begin }	{ }
ns32k_opcode		ns32k-opcode.h	/^struct ns32k_opcode {/ ;" struct 13 { md_begin parse }	{ }
ns32k_opcodes		ns32k-opcode.h	/^struct ns32k_opcode ns32k_opcodes[]=/ ;" global 318 { md_begin }	{ }
null		i386-opcode.h	/^seg_entry null = { "", 0x0 };/ ;" global 1 { }	{ }
number		hash.c	/^int     number;			\/* number 0:TABLES-1 of current / ;" global 1 { Mhash next_char_of_string operand whattable }	{ }
numopcodes		m68k-opcode.h	/^int numopcodes=sizeof(m68k_opcodes)\/sizeof(m68k_op/ ;" global 1 { }	{ }
o		i386.c	/^struct obstack o;/ ;" global 1 { IS_JUMP_ON_CX_ZERO IS_JUMP_ON_ECX_ZERO IS_LOOP_ECX_TIMES IS_STRING_INSTRUCTION md_assemble md_begin }	{ }
obstack		obstack.h	/^struct obstack		\/* control current object in curre/ ;" global 1 { POINTER int obstack_1grow obstack_alloc obstack_blank obstack_copy obstack_copy0 obstack_finish obstack_free obstack_grow obstack_grow0 obstack_object_size obstack_room operand void }	{ }
obstack_1grow		obstack.h	/^#define obstack_1grow(OBSTACK,datum)					\\/ ;" macro 1 { FRAG_APPEND_1_CHAR demand_copy_string void }	{ _obstack_newchunk obstack }
obstack_1grow_fast		obstack.h	/^#define obstack_1grow_fast(h,achar) (*((h)->next_f/ ;" macro 1 { void }	{ h }
obstack_alignment_mask		obstack.h	/^#define obstack_alignment_mask(h) ((h)->alignment_/ ;" macro 1 { frag_new subseg_new }	{ h }
obstack_alloc		obstack.h	/^#define obstack_alloc(OBSTACK,length)					\\/ ;" macro 1 { POINTER bit_fix_new fix_new fix_new_ns32k md_begin subseg_new subsegs_begin symbol_new }	{ obstack obstack_blank obstack_finish }
obstack_base		obstack.h	/^#define obstack_base(h) ((h)->object_base)/ ;" macro 1 { POINTER }	{ h }
obstack_begin		obstack.h	/^#define obstack_begin(h, size) \\/ ;" macro 1 { md_begin read_begin subsegs_begin }	{ _obstack_begin h obstack_chunk_alloc obstack_chunk_free size }
obstack_blank		obstack.h	/^#define obstack_blank(OBSTACK,length)					\\/ ;" macro 1 { frag_new obstack_alloc void }	{ _obstack_newchunk obstack }
obstack_blank_fast		obstack.h	/^#define obstack_blank_fast(h,n) ((h)->next_free +=/ ;" macro 1 { convert_iif frag_more frag_var void }	{ h }
obstack_chunk_alloc		as.h	/^#define obstack_chunk_alloc	xmalloc/ ;" macro 1 { obstack_begin obstack_init }	{ xmalloc }
obstack_chunk_free		as.h	/^#define obstack_chunk_free	xfree/ ;" macro 1 { obstack_begin obstack_init }	{ xfree }
obstack_chunk_size		obstack.h	/^#define obstack_chunk_size(h) ((h)->chunk_size)/ ;" macro 1 { }	{ h }
obstack_copy		obstack.h	/^#define obstack_copy(OBSTACK,where,length)				\\/ ;" macro 1 { POINTER }	{ obstack obstack_finish obstack_grow where }
obstack_copy0		obstack.h	/^#define obstack_copy0(OBSTACK,where,length)				\\/ ;" macro 1 { POINTER }	{ obstack obstack_finish obstack_grow0 where }
obstack_finish		obstack.h	/^#define obstack_finish(OBSTACK)  					\\/ ;" macro 1 { POINTER demand_copy_string frag_new md_begin obstack_alloc obstack_copy obstack_copy0 subseg_new symbol_new }	{ __INT_TO_PTR __PTR_TO_INT obstack value }
obstack_free		obstack.c	/^obstack_free (h, obj)/ ;" function 1 { obstack_free }	{ }
obstack_grow		obstack.h	/^#define obstack_grow(OBSTACK,where,length)				\\/ ;" macro 1 { md_begin obstack_copy symbol_new void }	{ _obstack_newchunk bcopy obstack where }
obstack_grow0		obstack.h	/^#define obstack_grow0(OBSTACK,where,length)				\\/ ;" macro 1 { obstack_copy0 void }	{ _obstack_newchunk bcopy obstack where }
obstack_init		obstack.h	/^#define obstack_init(h) \\/ ;" macro 1 { }	{ _obstack_begin h obstack_chunk_alloc obstack_chunk_free }
obstack_next_free		obstack.h	/^#define obstack_next_free(h)	((h)->next_free)/ ;" macro 1 { POINTER colon frag_more frag_new frag_var frag_variant gdb_line md_begin operand s_gdbbeg s_gdbend stab subseg_new }	{ h }
obstack_object_size		obstack.h	/^#define obstack_object_size(OBSTACK)					\\/ ;" macro 1 { int }	{ obstack }
obstack_room		obstack.h	/^#define obstack_room(OBSTACK)						\\/ ;" macro 1 { FRAG_APPEND_1_CHAR frag_grow int }	{ obstack }
octal		i860.c	/^static unsigned char octal[256];/ ;" global 1 { isoctal md_begin }	{ }
offs		m68k.c	/^#define offs(exp)	((exp)->e_exp.X_add_number)/ ;" macro 1 { add_fix get_num m68_ip }	{ }
old_buffer		read.c	/^static char *old_buffer = 0;	\/* JF a hack *\// ;" global 1 { read_a_source_file }	{ }
old_input		read.c	/^static char *old_input;/ ;" global 1 { read_a_source_file }	{ }
old_limit		read.c	/^static char *old_limit;/ ;" global 1 { read_a_source_file }	{ }
omagic		i386.c	/^long omagic = OMAGIC;/ ;" global 1 { write_object_file }	{ }
one		m68k-opcode.h	/^#define one(x) ((x) << 16)/ ;" macro 1 { }	{ }
one_byte_segment_defaults		i386-opcode.h	/^seg_entry *one_byte_segment_defaults[] = {/ ;" global 9 { md_assemble }	{ }
op_encoding		expr.c	/^static operatorT op_encoding [256] = {	\/* maps ASC/ ;" global 27 { expr }	{ }
op_hash		i386.c	/^static struct hash_control *op_hash = (struct hash/ ;" global 1 { i860_ip m68_ip md_assemble md_begin vip vip_begin }	{ }
op_rank		expr.c	/^op_rank [] = { 0, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1 / ;" global 1 { expr }	{ }
opcode_chars		i386.c	/^static char opcode_chars[256];/ ;" global 1 { is_opcode_char md_assemble md_begin }	{ }
operand		expr.c	/^operand (expressionP)/ ;" function 392 { addr_mode expr operand }	{ ERROR_EXPONENT_OVERFLOW EXP_CHARS FLT_CHARS LITTLENUM_MASK LITTLENUM_NUMBER_OF_BITS LITTLENUM_TYPE NULL N_TYPE_seg SIZE_OF_LARGE_NUMBER SKIP_WHITESPACE TRUE as_warn atof_generic clean_up_expression expression frag_now frags generic_bignum generic_floating_point_number get_symbol_end hex_value index input_line_pointer is_name_beginner is_part_of_name know local_label_name name now_seg number obstack obstack_next_free operand register seg segT seg_N_TYPE sy_type sy_value symbol symbol_new symbol_table_insert symbol_table_lookup valueT zero_address_frag }
operand_chars		i386.c	/^static char operand_chars[256];/ ;" global 1 { is_operand_char md_begin }	{ }
operand_special_chars		i386.c	/^static char operand_special_chars[] = "%$-+(,)*._~/ ;" global 1 { md_begin }	{ }
operatorT		expr.c	/^typedef enum/ ;" typedef 18 { expr }	{ }
operator_rankT		expr.c	/^typedef char operator_rankT;/ ;" typedef 1 { }	{ }
opt1		ns32k.c	/^struct option opt1[]= \/* restore, exit *\// ;" global 12 { encode_operand }	{ }
opt2		ns32k.c	/^struct option opt2[]= \/* save, enter *\// ;" global 12 { encode_operand }	{ }
opt3		ns32k.c	/^struct option opt3[]= \/* setcfg *\// ;" global 8 { encode_operand }	{ }
opt4		ns32k.c	/^struct option opt4[]=/ ;" global 7 { encode_operand }	{ }
opt5		ns32k.c	/^struct option opt5[]= \/* string inst *\// ;" global 7 { encode_operand }	{ }
opt6		ns32k.c	/^struct option opt6[]= \/* plain reg ext,cvtp etc *\// ;" global 12 { encode_operand }	{ }
option		ns32k.c	/^struct option {/ ;" struct 5 { }	{ }
optlist		ns32k.c	/^void optlist(str,optionP,default_map)/ ;" function 26 { encode_operand }	{ as_fatal i register }
ordinal_names		i386.c	/^static char *ordinal_names[] = { "first", "second"/ ;" global 1 { i386_operand md_assemble }	{ }
out_file_name		as.h	/^out_file_name;			\/* name of emitted object file *\// ;" global 1 { Create_VMS_Object_File Mas VMS_TBT_Module_Begin Write_VMS_MHD_Records write_object_file }	{ }
output_file_append		output-file.c	/^output_file_append (where, length, filename)/ ;" function 17 { gdb_emit write_object_file }	{ as_fatal as_perror stdoutput where }
output_file_close		output-file.c	/^output_file_close (filename)/ ;" function 10 { write_object_file }	{ NULL as_fatal as_perror stdoutput }
output_file_create		output-file.c	/^output_file_create (name)/ ;" function 12 { write_object_file }	{ as_fatal as_perror name stdoutput }
output_invalid		i386.c	/^char * output_invalid (c)/ ;" function 7 { i386_operand md_assemble }	{ output_invalid_buf }
output_invalid_buf		i386.c	/^char output_invalid_buf[8];/ ;" global 1 { output_invalid }	{ }
output_seek		output-file.c	/^output_seek(to)/ ;" function 5 { a_out_to_mach_O }	{ as_fatal stdoutput }
output_write		output-file.c	/^output_write(what, size)/ ;" function 8 { a_out_to_mach_O }	{ as_fatal size stdoutput what }
p		hash.c	/^char *  p;/ ;" global 1 { Mhash Mvax PUT_COUNTED_STRING a_out_to_mach_O as_howmuch as_where atof_generic atof_m68k big_cons bignum_copy cons do_scrub_begin equals float_cons gdb_symbols_fixup input_file_give_next_buffer input_scrub_next_buffer know local_label_name m68_ip md_assemble md_estimate_size_before_relax md_number_to_chars md_number_to_disp md_number_to_field md_number_to_imm parse_register pi read_a_source_file s_comm s_desc s_fill s_gdbsym s_lcomm s_lsym s_org s_reference s_set s_space symbol_new vip vip_op }	{ }
packmantissa		atof-m68k.c	/^unsigned int / ;" function 12 { atof_m68k }	{ i }
panic		m68k.c	/^panic(format,args)/ ;" function 9 { }	{ _doprnt abort as_where }
parse		ns32k.c	/^int parse(line,recursive_level)/ ;" function 108 { md_assemble parse }	{ IIF IIF_ENTRIES as_fatal as_warn desc encode_operand freeptr hash_find i iif inst_hash_handle line ns32k_opcode parse register }
parse_register		i386.c	/^reg_entry *parse_register (reg_string)/ ;" function 16 { i386_operand }	{ MAX_REG_NAME_SIZE hash_find is_register_char p reg_entry reg_hash register register_chars }
partial_size		input-scrub.c	/^static int	partial_size;	\/* >=0. Number of chars i/ ;" global 1 { input_scrub_new_file input_scrub_next_buffer }	{ }
partial_where		input-scrub.c	/^static char *	partial_where;	\/* -> after last full/ ;" global 1 { input_scrub_next_buffer }	{ }
pd_fp		atof-m68k.c	/^struct pd_fp {/ ;" struct 15 { atof_m68k }	{ }
pe		i386.c	/^static void pe (e)/ ;" function 17 { pi }	{ ps seg_names }
perform_an_assembly_pass		as.c	/^perform_an_assembly_pass (argc, argv)/ ;" function 28 { Mas }	{ FALSE NULL data_fix_root input_scrub_new_file need_pass_2 read_a_source_file text_fix_root }
physical_input_file		input-scrub.c	/^char *		physical_input_file,/ ;" global 1 { as_where input_scrub_begin input_scrub_new_file seen_at_least_1_file }	{ }
physical_input_line		input-scrub.c	/^line_numberT	physical_input_line,/ ;" global 1 { as_where bump_line_counters input_scrub_new_file }	{ }
pi		i386.c	/^static void pi (line, x)/ ;" function 22 { md_assemble }	{ Abs Disp Imm Reg i index line p pe pt pte register template }
plus_1		flonum-const.c	/^static LITTLENUM_TYPE plus_1 [] = {    10         / ;" global 1 { }	{ }
plus_10		flonum-const.c	/^static LITTLENUM_TYPE plus_10[] = {/ ;" global 4 { }	{ }
plus_11		flonum-const.c	/^static LITTLENUM_TYPE plus_11 [] = {/ ;" global 4 { }	{ }
plus_2		flonum-const.c	/^static LITTLENUM_TYPE plus_2 [] = {   100         / ;" global 1 { }	{ }
plus_3		flonum-const.c	/^static LITTLENUM_TYPE plus_3 [] = { 10000         / ;" global 1 { }	{ }
plus_4		flonum-const.c	/^static LITTLENUM_TYPE plus_4 [] = { 57600,  1525  / ;" global 1 { }	{ }
plus_5		flonum-const.c	/^static LITTLENUM_TYPE plus_5 [] = { 28609, 34546, / ;" global 1 { }	{ }
plus_6		flonum-const.c	/^static LITTLENUM_TYPE plus_6 [] = { 61313, 34220, / ;" global 1 { }	{ }
plus_7		flonum-const.c	/^static LITTLENUM_TYPE plus_7 [] = {/ ;" global 2 { }	{ }
plus_8		flonum-const.c	/^static LITTLENUM_TYPE plus_8 [] = {/ ;" global 3 { }	{ }
plus_9		flonum-const.c	/^static LITTLENUM_TYPE plus_9 [] = {/ ;" global 4 { }	{ }
po_hash		read.c	/^po_hash = NULL;			\/* use before set up: NULL-> add/ ;" global 1 { pobegin read_a_source_file }	{ }
pobegin		read.c	/^pobegin()/ ;" function 20 { read_begin }	{ as_fatal hash_insert hash_new md_pseudo_table po_hash potable pseudo_typeS }
potable		read.c	/^potable[] =/ ;" global 46 { pobegin }	{ }
pp		hash.c	/^char ** pp;/ ;" global 1 { Mhash }	{ }
prefix_entry		i386.h	/^typedef struct {/ ;" typedef 4 { md_assemble md_begin }	{ }
prefix_hash		i386.c	/^static struct hash_control *prefix_hash = (struct / ;" global 1 { md_assemble md_begin }	{ }
preprocess		input-file.c	/^int preprocess = 0;/ ;" global 1 { input_file_give_next_buffer input_file_open input_scrub_next_buffer }	{ }
print_address		m68k.c	/^print_address(add,fp)/ ;" function 5 { }	{ }
print_frags		m68k.c	/^print_frags()/ ;" function 13 { }	{ fragS text_frag_root }
print_insn		i860.c	/^print_insn(insn)/ ;" function 50 { }	{ sy_name }
ps		i386.c	/^static void ps (s)/ ;" function 8 { pe }	{ SYMBOL_TYPE }
pseudo_set		read.c	/^pseudo_set (symbolP)/ ;" function 63 { equals s_set stab }	{ BAD_CASE TRUE as_warn expression expressionS know need_pass_2 register segT seg_N_TYPE sy_type sy_value zero_address_frag }
pseudo_typeS		md.h	/^typedef struct {/ ;" typedef 6 { pobegin read_a_source_file }	{ }
pt		i386.c	/^static void pt (t)/ ;" function 13 { pi pte }	{ Unknown register type_name type_names }
pte		i386.c	/^static void pte (t)/ ;" function 20 { pi }	{ i pt }
r_mask		ns32k.c	/^static unsigned long r_mask[]={	0x00000000, 0x0000/ ;" global 9 { md_number_to_field }	{ }
read_a_source_file		read.c	/^read_a_source_file (buffer)/ ;" function 306 { perform_an_assembly_pass }	{ NULL SKIP_WHITESPACE as_warn bcopy buffer_limit bump_line_counters colon demand_empty_rest_of_line do_scrub_next_char equals expressionS gdb_block_beg gdb_block_end gdb_block_position gdb_symbols_fixup get_symbol_end hash_find ignore_rest_of_line index input_line_pointer input_scrub_next_buffer is_end_of_line is_name_beginner know line_comment_chars local_colon md_assemble name old_buffer old_input old_limit p po_hash pseudo_typeS register scrub_from_string scrub_last_string scrub_string scrub_to_string segT strstr strstrn subseg_new sy_type symbolS symbol_find_or_make xmalloc xrealloc }
read_begin		read.c	/^read_begin()/ ;" function 8 { Mas }	{ BIGNUM_BEGIN_SIZE bignum_limit bignum_low notes obstack_begin pobegin xmalloc }
reg_entry		i386.h	/^typedef struct {/ ;" typedef 5 { i386_operand md_assemble md_begin parse_register }	{ }
reg_hash		i386.c	/^static struct hash_control *reg_hash = (struct has/ ;" global 1 { md_begin parse_register }	{ }
register		as.h	/^#define register		\/* no registers: helps debugging/ ;" macro 1 { _obstack_begin _obstack_free _obstack_newchunk addr_mode as_howmuch bignum_copy bit_fix_new convert_iif crack_operand encode_operand evaluate_expr expr find fix_new_ns32k frag_more frag_new frag_var frag_variant gdb_file_read gdb_symbols_emit gdb_symbols_fixup get_addr_mode get_symbol_end hash_apply hash_ask hash_code hash_delete hash_find hash_grow hash_insert hash_jam hash_new hash_replace hash_say i386_operand input_file_give_next_buffer input_scrub_next_buffer list_search m68_ip m68k_reg_parse md_assemble md_begin md_convert_frag md_estimate_size_before_relax md_number_to_chars md_number_to_disp md_number_to_field md_number_to_imm new_0 new_1 new_2 operand optlist parse parse_register pi pt read_a_source_file s_even s_i860_align (etc) }	{ }
register_chars		i386.c	/^static char register_chars[256];/ ;" global 1 { is_register_char md_begin parse_register }	{ }
relax_addressT		as.h	/^typedef unsigned long int relax_addressT;\/* Enough/ ;" typedef 1 { relax_align relax_segment write_object_file }	{ }
relax_align		write.c	/^relax_align (address, alignment)/ ;" function 11 { relax_segment }	{ relax_addressT }
relax_segment		write.c	/^relax_segment (segment_frag_root, segment_type)/ ;" function 258 { write_object_file }	{ BAD_CASE as_warn broken_word flagseen frag isdnrange know md_estimate_size_before_relax md_long_jump_size md_relax_table md_short_jump_size register relax_addressT relax_align relax_substateT relax_typeS seg_N_TYPE subseg_change sy_name sy_type sy_value symbolS zero_address_frag }
relax_stateT		as.h	/^typedef enum/ ;" typedef 19 { }	{ }
relax_substateT		as.h	/^typedef unsigned long int relax_substateT;/ ;" typedef 1 { colon equals frag_align md_assemble relax_segment s_fill s_org s_set s_space }	{ }
relax_typeS		md.h	/^typedef struct/ ;" typedef 10 { relax_segment }	{ }
reloc_segment		atom.c	/^struct segment_command		reloc_segment;/ ;" global 1 { a_out_to_mach_O }	{ }
reverse_16_bits		m68k.c	/^reverse_16_bits(in)/ ;" function 15 { m68_ip }	{ }
reverse_8_bits		m68k.c	/^reverse_8_bits(in)/ ;" function 15 { m68_ip }	{ }
robyn		m68k.c	/^struct obstack robyn;/ ;" global 1 { md_begin }	{ }
root		gdb-blocks.c	/^static node_2_T *	root;	\/* 3 level tree of block l/ ;" global 1 { find gdb_block_begin gdb_symbols_begin gdb_symbols_emit gdb_symbols_fixup new_sfg }	{ }
s_abort		read.c	/^s_abort()/ ;" function 4 { }	{ as_fatal }
s_align		read.c	/^s_align()/ ;" function 23 { }	{ MAX_ALIGNMENT as_warn demand_empty_rest_of_line frag_align get_absolute_expression input_line_pointer need_pass_2 register }
s_comm		read.c	/^s_comm()/ ;" function 45 { }	{ SKIP_WHITESPACE as_warn demand_empty_rest_of_line get_absolute_expression get_symbol_end ignore_rest_of_line input_line_pointer know name p register sy_desc sy_name sy_other sy_type sy_value symbolS symbol_find_or_make zero_address_frag }
s_data		read.c	/^s_data()/ ;" function 8 { }	{ demand_empty_rest_of_line get_absolute_expression register subsegT subseg_new }
s_data1		m68k.c	/^s_data1()/ ;" function 5 { }	{ demand_empty_rest_of_line subseg_new }
s_data2		m68k.c	/^s_data2()/ ;" function 5 { }	{ demand_empty_rest_of_line subseg_new }
s_desc		read.c	/^s_desc()/ ;" function 32 { }	{ SKIP_WHITESPACE as_warn demand_empty_rest_of_line get_absolute_expression get_symbol_end ignore_rest_of_line input_line_pointer name p register sy_desc symbolS symbol_find_or_make symbol_table_lookup }
s_dual		i860.c	/^s_dual(mode)/ ;" function 5 { }	{ dual_insn_mode }
s_even		m68k.c	/^s_even()/ ;" function 11 { }	{ demand_empty_rest_of_line frag_align get_absolute_expression need_pass_2 register }
s_file		read.c	/^s_file()/ ;" function 11 { }	{ demand_copy_string discard_rest_of_line new_logical_line register }
s_fill		read.c	/^s_fill()/ ;" function 53 { }	{ BSD_FILL_SIZE_CROCK_4 BSD_FILL_SIZE_CROCK_8 as_warn bzero demand_empty_rest_of_line frag_var get_absolute_expression get_absolute_expression_and_terminator ignore_rest_of_line input_line_pointer md_number_to_chars need_pass_2 p register relax_substateT symbolS }
s_gdbbeg		read.c	/^s_gdbbeg()/ ;" function 11 { }	{ as_warn demand_empty_rest_of_line flagseen frag_now frags gdb_block_beg get_absolute_expression obstack_next_free register }
s_gdbblock		read.c	/^s_gdbblock()/ ;" function 16 { }	{ as_warn demand_empty_rest_of_line flagseen gdb_block_position get_absolute_expression get_absolute_expression_and_terminator ignore_rest_of_line input_line_pointer register }
s_gdbend		read.c	/^s_gdbend()/ ;" function 11 { }	{ as_warn demand_empty_rest_of_line flagseen frag_now frags gdb_block_end get_absolute_expression obstack_next_free register }
s_gdbline		read.c	/^s_gdbline()/ ;" function 15 { }	{ as_warn demand_empty_rest_of_line flagseen gdb_line get_absolute_expression get_absolute_expression_and_terminator ignore_rest_of_line }
s_gdblinetab		read.c	/^s_gdblinetab()/ ;" function 15 { }	{ as_warn demand_empty_rest_of_line flagseen gdb_line_tab get_absolute_expression get_absolute_expression_and_terminator ignore_rest_of_line }
s_gdbsym		read.c	/^s_gdbsym()/ ;" function 29 { }	{ SKIP_WHITESPACE as_warn demand_empty_rest_of_line flagseen gdb_symbols_fixup get_absolute_expression get_symbol_end ignore_rest_of_line input_line_pointer name p register symbolS symbol_find_or_make }
s_globl		read.c	/^s_globl()/ ;" function 22 { }	{ SKIP_WHITESPACE demand_empty_rest_of_line get_symbol_end input_line_pointer name register sy_type symbolS symbol_find_or_make }
s_i860_align		i860.c	/^s_i860_align()/ ;" function 40 { }	{ MAX_ALIGNMENT OP_NOP as_warn demand_empty_rest_of_line frag_align get_absolute_expression i input_line_pointer need_pass_2 now_seg register }
s_int		read.c	/^s_int()/ ;" function 4 { }	{ cons }
s_lcomm		read.c	/^s_lcomm()/ ;" function 42 { }	{ SKIP_WHITESPACE as_warn bss_address_frag demand_empty_rest_of_line get_absolute_expression get_symbol_end ignore_rest_of_line input_line_pointer local_bss_counter name p register sy_desc sy_other sy_type sy_value symbolS symbol_find_or_make }
s_line		read.c	/^s_line()/ ;" function 8 { }	{ NULL discard_rest_of_line get_absolute_expression new_logical_line }
s_long		read.c	/^s_long()/ ;" function 4 { }	{ cons }
s_lsym		read.c	/^s_lsym()/ ;" function 37 { }	{ SKIP_WHITESPACE as_warn demand_empty_rest_of_line expression expressionS get_symbol_end ignore_rest_of_line input_line_pointer know name p register segT seg_N_TYPE seg_name symbolS symbol_new valueT zero_address_frag }
s_org		read.c	/^s_org()/ ;" function 37 { }	{ as_warn demand_empty_rest_of_line expressionS frag_var get_absolute_expression get_known_segmented_expression input_line_pointer need_pass_2 now_seg p register relax_substateT segT seg_name }
s_reference		read.c	/^s_reference()/ ;" function 16 { }	{ demand_empty_rest_of_line get_symbol_end input_line_pointer name p register symbolS symbol_find_or_make }
s_set		read.c	/^s_set()/ ;" function 48 { }	{ SKIP_WHITESPACE as_warn demand_empty_rest_of_line expressionS frag_var get_known_segmented_expression get_symbol_end ignore_rest_of_line input_line_pointer name need_pass_2 now_seg p pseudo_set register relax_substateT segT seg_name symbolS symbol_find_or_make }
s_space		read.c	/^s_space()/ ;" function 25 { }	{ as_warn demand_empty_rest_of_line frag_var get_absolute_expression get_absolute_expression_and_terminator ignore_rest_of_line input_line_pointer need_pass_2 p register relax_substateT symbolS }
s_text		read.c	/^s_text()/ ;" function 8 { }	{ demand_empty_rest_of_line get_absolute_expression register subsegT subseg_new }
save_source		input-scrub.c	/^static char	save_source [AFTER_SIZE];/ ;" global 1 { input_scrub_next_buffer }	{ }
save_stack		i386.c	/^static char save_stack[32];/ ;" global 1 { md_assemble }	{ }
save_stack_p		i386.c	/^static char *save_stack_p;	\/* stack pointer *\// ;" global 1 { END_STRING_AND_SAVE RESTORE_END_STRING md_assemble }	{ }
scrub_file		app.c	/^FILE *scrub_file;/ ;" global 1 { input_file_give_next_buffer scrub_from_file scrub_to_file }	{ }
scrub_from_file		app.c	/^scrub_from_file()/ ;" function 4 { input_file_give_next_buffer }	{ scrub_file }
scrub_from_string		app.c	/^scrub_from_string()/ ;" function 4 { read_a_source_file }	{ scrub_last_string scrub_string }
scrub_last_string		app.c	/^char *scrub_last_string;/ ;" global 1 { read_a_source_file scrub_from_string }	{ }
scrub_string		app.c	/^char *scrub_string;/ ;" global 1 { read_a_source_file scrub_from_string scrub_to_string }	{ }
scrub_to_file		app.c	/^scrub_to_file(ch)/ ;" function 5 { input_file_give_next_buffer }	{ scrub_file }
scrub_to_string		app.c	/^scrub_to_string(ch)/ ;" function 5 { read_a_source_file }	{ scrub_string }
seen_at_least_1_file		input-scrub.c	/^seen_at_least_1_file ()		\/* TRUE if we opened any / ;" function 4 { Mas }	{ NULL physical_input_file }
seg		m68k.c	/^#define seg(exp)	((exp)->e_exp.X_seg)/ ;" macro 1 { getExpression get_num i386_operand m68_ip md_assemble operand subseg_change subseg_new }	{ }
segT		as.h	/^typedef enum/ ;" typedef 16 { cons convert_iif equals evaluate_expr expr expr_part getExpression get_absolute_expression get_known_segmented_expression get_segmented_expression i386_operand md_assemble operand pseudo_set read_a_source_file s_lsym s_org s_set }	{ }
seg_N_TYPE		subsegs.c	/^seg_N_TYPE[] = {/ ;" global 12 { colon expr_part operand pseudo_set relax_segment s_lsym }	{ }
seg_entry		i386.h	/^typedef struct {/ ;" typedef 4 { md_assemble }	{ }
seg_fix_rootP		write.h	/^COMMON fixS **	seg_fix_rootP;	\/* -> one of above. / ;" global 1 { fix_new fix_new_ns32k subseg_change }	{ }
seg_name		subsegs.c	/^seg_name[] = {/ ;" global 13 { colon cons equals fixup_segment md_assemble s_lsym s_org s_set subsegs_begin }	{ }
seg_names		i386.c	/^char *seg_names[] = {/ ;" global 3 { pe }	{ }
sel_section		atom.c	/^struct section			sel_section;	\/* __OBJC, __selecto/ ;" global 1 { a_out_to_mach_O emit_relocations get_objc_section_bounds }	{ }
set_insn		i860.c	/^} the_insn, set_insn;/ ;" global 1 { }	{ }
setbuffer		as.h	/^#define setbuffer(a,b,c)/ ;" macro 1 { input_file_open }	{ }
size		gdb.c	/^static long int		size;	\/* 0 or size of GDB symbol / ;" global 1 { ENCODE_RELAX_STATE IIF _obstack_begin a_out_to_mach_O bit_fix_new convert_iif emit_relocations fix_new fix_new_ns32k fixup_segment gdb_alter gdb_begin gdb_emit gdb_mach_O_emit get_objc_section_bounds input_file_give_next_buffer md_assemble obstack_begin output_write setbuffer }	{ }
size_of_the_object_file		write.c	/^static long int		size_of_the_object_file; \/* # byt/ ;" global 1 { write_object_file }	{ }
size_reloc_info		i860.c	/^int size_reloc_info = sizeof(struct reloc_info_i86/ ;" global 1 { }	{ }
source		gdb-lines.c	/^struct source/ ;" struct 7 { md_assemble }	{ }
sourcevector		gdb-lines.c	/^struct sourcevector/ ;" struct 6 { a_out_to_mach_O }	{ }
space_chars		i386.c	/^static char space_chars[256];/ ;" global 1 { is_space_char md_begin }	{ }
special_case		i860.c	/^static int special_case;/ ;" global 1 { }	{ }
ss		i386-opcode.h	/^seg_entry ss = { "ss", 0x36 };/ ;" global 1 { SKIP_W i386_operand md_assemble try_index }	{ }
stab		read.c	/^stab (what)/ ;" function 88 { }	{ BAD_CASE FALSE NULL SKIP_WHITESPACE TRUE as_warn demand_copy_C_string demand_empty_rest_of_line frag frag_now frags get_absolute_expression get_absolute_expression_and_terminator ignore_rest_of_line input_line_pointer obstack_next_free pseudo_set register sy_desc sy_name sy_other sy_type sy_value symbolS symbol_new what zero_address_frag }
statbuf		hash.c	/^int statbuf[STATBUFSIZE];	\/* display statistics he/ ;" global 1 { Mhash }	{ }
states		read.c	/^a char does not have exactly 256 states (hopefully/ ;" function 21 { }	{ }
stdoutput		output-file.c	/^stdoutput;/ ;" global 1 { output_file_append output_file_close output_file_create output_seek output_write }	{ }
stralloc		as.c	/^stralloc (str)/ ;" function 11 { Mas }	{ register xmalloc }
string_byte_count		write.c	/^static long int string_byte_count;/ ;" global 1 { write_object_file }	{ }
stringer		read.c	/^stringer(append_zero)		\/* Worker to do .ascii etc / ;" function 53 { }	{ FRAG_APPEND_1_CHAR SKIP_WHITESPACE as_warn demand_empty_rest_of_line input_line_pointer is_it_end_of_statement know next_char_of_string register }
strstr		strstr.c	/^strstr(s, wanted)/ ;" function 22 { read_a_source_file }	{ CONST NULL SIZET register }
strstrn		strstr.c	/^strstrn(s, wanted, n)/ ;" function 35 { read_a_source_file }	{ CONST NULL SIZET register }
subs		m68k.c	/^#define subs(exp)	((exp)->e_exp.X_subtract_symbol)/ ;" macro 1 { add_fix get_num isvar m68_ip }	{ }
subsegT		as.h	/^typedef unsigned char	subsegT;/ ;" typedef 1 { s_data s_text }	{ }
subseg_change		subsegs.c	/^subseg_change (seg, subseg)/ ;" function 16 { md_convert_frag md_estimate_size_before_relax relax_segment subseg_new write_object_file }	{ data_fix_root know now_seg now_subseg seg seg_fix_rootP text_fix_root }
subseg_new		subsegs.c	/^subseg_new (seg, subseg)	\/* begin assembly for a n/ ;" function 132 { read_a_source_file s_data s_data1 s_data2 s_text subsegs_begin write_object_file }	{ NULL SIZEOF_STRUCT_FRAG fragS frag_now frag_wane frags frchainS frchain_now frchain_root know now_seg now_subseg obstack_alignment_mask obstack_alloc obstack_finish obstack_next_free register seg subseg_change }
subsegs_begin		subsegs.c	/^subsegs_begin()/ ;" function 30 { Mas }	{ NULL SEG_MAXIMUM_ORDINAL SIZEOF_STRUCT_FRAG data0_frchainP fragS frag_now frags frchain_now frchain_root know now_subseg obstack_alloc obstack_begin seg_name subseg_new }
sy_desc		struc-symbol.h	/^#define sy_desc		sy_nlist.	n_desc/ ;" macro 1 { colon s_comm s_desc s_lcomm stab symbol_new }	{ }
sy_hash		symbols.c	/^sy_hash;			\/* symbol-name => struct symbol pointer/ ;" global 1 { symbol_begin symbol_find symbol_table_insert }	{ }
sy_name		struc-symbol.h	/^#define sy_name		sy_nlist .n_un. n_name/ ;" macro 1 { cons emit_relocations expr expr_part fixup_segment get_known_segmented_expression print_insn relax_segment s_comm stab symbol_new symbol_table_insert write_object_file }	{ }
sy_other		struc-symbol.h	/^#define sy_other	sy_nlist.	n_sect/ ;" macro 1 { colon s_comm s_lcomm stab symbol_new }	{ }
sy_type		struc-symbol.h	/^#define sy_type 	sy_nlist.	n_type/ ;" macro 1 { VMS_write_object_file colon emit_relocations expr_part fixup_segment md_estimate_size_before_relax operand pseudo_set read_a_source_file relax_segment s_comm s_globl s_lcomm stab symbol_begin symbol_new write_object_file }	{ }
sy_value		struc-symbol.h	/^#define sy_value	sy_nlist.	n_value/ ;" macro 1 { VMS_write_object_file colon emit_relocations fixup_segment gdb_symbols_emit get_objc_section_bounds md_convert_frag md_create_long_jump md_estimate_size_before_relax operand pseudo_set relax_segment s_comm s_lcomm stab symbol_new write_object_file }	{ }
sym_section		atom.c	/^struct section			sym_section;	\/* __OBJC, __symbol_/ ;" global 1 { a_out_to_mach_O emit_relocations get_objc_section_bounds }	{ }
symbol		struc-symbol.h	/^struct symbol			\/* our version of an nlist node *\// ;" global 1 { VMS_Check_For_Main VMS_Initialized_Data_Size VMS_write_object_file colon equals expr frag_var frag_variant md_assemble operand symbol_new }	{ }
symbolS		struc-symbol.h	/^typedef struct symbol symbolS;/ ;" typedef 1 { VMS_Check_For_Main VMS_write_object_file colon emit_relocations fixup_segment frag_align get_objc_section_bounds i386_operand m68_ip md_assemble md_convert_frag md_create_long_jump md_estimate_size_before_relax read_a_source_file relax_segment s_comm s_desc s_fill s_gdbsym s_globl s_lcomm s_lsym s_reference s_set s_space stab symbol_find symbol_find_or_make symbol_new symbol_table_lookup write_object_file }	{ }
symbol_begin		symbols.c	/^symbol_begin()/ ;" function 10 { Mas }	{ NULL abs_symbol bzero hash_new local_bss_counter local_label_counter sy_hash sy_type symbol_lastP symbol_rootP }
symbol_chars		app.c	/^static char	symbol_chars[] = / ;" global 2 { do_scrub_begin }	{ }
symbol_find		symbols.c	/^symbol_find (name)/ ;" function 5 { VMS_Check_For_Main symbol_table_lookup }	{ hash_find name sy_hash symbolS }
symbol_find_or_make		symbols.c	/^symbol_find_or_make (name)/ ;" function 13 { equals read_a_source_file s_comm s_desc s_gdbsym s_globl s_lcomm s_reference s_set }	{ NULL name register symbolS symbol_new symbol_table_insert symbol_table_lookup zero_address_frag }
symbol_fixup_group		gdb-symbols.c	/^struct symbol_fixup_group/ ;" struct 6 { }	{ }
symbol_fixup_groupS		gdb-symbols.c	/^typedef struct symbol_fixup_group symbol_fixup_gro/ ;" typedef 1 { gdb_symbols_emit gdb_symbols_fixup new_sfg }	{ }
symbol_lastP		symbols.c	/^symbolS * symbol_lastP;/ ;" global 1 { symbol_begin symbol_new }	{ }
symbol_name_build		symbols.c	/^  char symbol_name_build[12];	\/* used for created / ;" global 1 { local_label_name }	{ }
symbol_new		symbols.c	/^symbol_new (name, type, other, desc, value, frag)/ ;" function 49 { colon operand s_lsym stab symbol_find_or_make }	{ NULL desc frag name notes obstack_alloc obstack_finish obstack_grow p register sy_desc sy_name sy_other sy_type sy_value symbol symbolS symbol_lastP symbol_rootP value }
symbol_rootP		symbols.c	/^symbolS * symbol_rootP;/ ;" global 1 { VMS_Check_For_Main VMS_Initialized_Data_Size VMS_write_object_file symbol_begin symbol_new write_object_file }	{ }
symbol_segment		atom.c	/^struct symseg_command		symbol_segment;/ ;" global 1 { a_out_to_mach_O }	{ }
symbol_table		atom.c	/^struct symtab_command		symbol_table;/ ;" global 1 { a_out_to_mach_O }	{ }
symbol_table_insert		symbols.c	/^symbol_table_insert (symbolP)/ ;" function 13 { colon operand symbol_find_or_make }	{ as_fatal hash_jam know register sy_hash sy_name }
symbol_table_lookup		symbols.h	/^#define symbol_table_lookup(name) ((symbolS *)(sym/ ;" macro 1 { colon get_objc_section_bounds operand s_desc symbol_find_or_make }	{ name symbolS symbol_find }
synthetic_votstrs		vax.c	/^synthetic_votstrs[] =/ ;" global 54 { vip_begin }	{ }
table_size_of_flonum_powers_of_ten		flonum-const.c	/^int table_size_of_flonum_powers_of_ten = 11;/ ;" global 1 { atof_generic }	{ }
template		i386.h	/^typedef struct {/ ;" typedef 59 { md_assemble md_begin pi }	{ }
templates		i386.h	/^typedef struct {/ ;" typedef 4 { md_assemble md_begin }	{ }
text_fix_root		write.h	/^COMMON fixS *	text_fix_root;	\/* Chains fixSs. *\// ;" global 1 { VMS_Check_For_Main VMS_write_object_file perform_an_assembly_pass subseg_change write_object_file }	{ }
text_frag_root		write.c	/^static struct frag *	text_frag_root;/ ;" global 1 { VMS_Fix_Indirect_Reference VMS_write_object_file print_frags write_object_file }	{ }
text_last_frag		write.c	/^static struct frag *	text_last_frag;	\/* Last frag / ;" global 1 { get_objc_section_bounds write_object_file }	{ }
text_section		atom.c	/^struct section			text_section;	\/* __TEXT, __text */ ;" global 1 { a_out_to_mach_O }	{ }
the		vax.c	/^You have just broken the encoding below, which ass/ ;" global 1 { }	{ }
the_exec		write.c	/^static struct exec	the_exec;/ ;" global 1 { write_object_file }	{ }
the_ins		m68k.c	/^struct m68_it the_ins;		\/* the instruction being a/ ;" global 1 { Mm68k add_exp add_fix add_frag addword insop install_gen_operand install_operand m68_ip md_assemble }	{ }
the_insn		i860.c	/^} the_insn, set_insn;/ ;" global 1 { getExpression i860_ip md_assemble }	{ }
the_object_file		write.c	/^static char *		the_object_file;/ ;" global 1 { write_object_file }	{ }
this_operand		i386.c	/^static int this_operand;	\/* current operand we are/ ;" global 1 { md_assemble }	{ }
toHex		i860.c	/^static unsigned char toHex[256];/ ;" global 1 { md_begin }	{ }
try_index		m68k.c	/^try_index(s,opP)/ ;" function 63 { m68k_ip_op }	{ ADDR DATA FAIL OK SKIP_W i m68k_reg_parse mklower register ss }
two		m68k-opcode.h	/^#define two(x, y) (((x) << 16) + y)/ ;" macro 1 { }	{ }
two_byte_segment_defaults		i386-opcode.h	/^seg_entry *two_byte_segment_defaults[] = {/ ;" global 9 { md_assemble }	{ }
type_name		i386.c	/^struct type_name {/ ;" struct 4 { pt }	{ }
type_names		i386.c	/^} type_names[] = {/ ;" global 13 { pt }	{ }
uchar		i386.h	/^typedef unsigned char uchar;/ ;" typedef 1 { md_assemble md_convert_frag md_estimate_size_before_relax }	{ }
uint		i386.h	/^typedef unsigned int uint;/ ;" typedef 1 { i386_operand md_assemble md_convert_frag }	{ }
used		gdb-symbols.c	/^static short int		used; \/* # of last slot used. *\// ;" global 1 { gdb_symbols_emit gdb_symbols_fixup new_sfg }	{ }
v		vax.c	/^v;				\/* A vax instruction after decoding. *\// ;" global 1 { gdb_line gdb_lines_emit md_assemble md_number_to_chars md_number_to_imm }	{ }
value		hash.c	/^char *  value;/ ;" global 1 { BAD_CASE Mhash applicatee destroy gdb_alter hash_insert hash_jam hash_replace md_number_to_chars md_number_to_disp md_number_to_field md_number_to_imm mumble obstack_finish symbol_new }	{ }
valueT		struc-symbol.h	/^typedef unsigned valueT;	\/* The type of n_value. H/ ;" typedef 1 { colon md_assemble operand s_lsym }	{ }
vax_opcodeT		vax-inst.h	/^typedef long int vax_opcodeT;	\/* For initialising / ;" typedef 1 { vip }	{ }
vax_operand_width_size		vax.c	/^static short int vax_operand_width_size [256] = {/ ;" global 19 { vip }	{ }
vax_reg_parse		vax.c	/^vax_reg_parse(c1, c2, c3)	\/* 3 chars of register n/ ;" function 46 { vip_op }	{ AP FP PC SP register }
version_string		version.c	/^char version_string[] = "Gnu assembler version 1.2/ ;" global 1 { Mas }	{ }
vip		vax.c	/^vip (vitP, instring)/ ;" function 115 { Mvax md_assemble }	{ bzero hash_find md_number_to_chars op_hash p register vax_opcodeT vax_operand_width_size vip_op vop vot_code vot_how vot_wot }
vip_begin		vax.c	/^vip_begin(synthetic_too, immediate, indirect, disp/ ;" function 35 { Mvax md_begin }	{ hash_insert hash_new op_hash register synthetic_votstrs vip_op_defaults vot vot_detail vot_name votstrs }
vip_displen_metacharacter		vax.c	/^vip_displen_metacharacter   [256]; \/* TRUE if char/ ;" global 1 { DISPLENP vip_op_defaults }	{ }
vip_end		vax.c	/^vip_end()/ ;" function 3 { Mvax md_end }	{ }
vip_immediate_metacharacter		vax.c	/^vip_immediate_metacharacter [256], \/* TRUE if char/ ;" global 1 { IMMEDIATEP vip_op_defaults }	{ }
vip_indirect_metacharacter		vax.c	/^vip_indirect_metacharacter  [256], \/* TRUE if char/ ;" global 1 { INDIRECTP vip_op_defaults }	{ }
vip_op		vax.c	/^vip_op (optext, vopP)/ ;" function 668 { Mvax vip }	{ DISPLENP FALSE IMMEDIATEP INDIRECTP PC TRUE index p register vax_reg_parse }
vip_op_1		vax.c	/^vip_op_1 (table, truths)/ ;" function 10 { vip_op_defaults }	{ TRUE bzero }
vip_op_defaults		vax.c	/^vip_op_defaults(immediate, indirect, displen) \/* c/ ;" function 9 { Mvax vip_begin }	{ vip_displen_metacharacter vip_immediate_metacharacter vip_indirect_metacharacter vip_op_1 }
vit		vax-inst.h	/^struct vit			\/* vax instruction tree              / ;" global 1 { }	{ }
void		obstack.c	/^void (obstack_grow) (obstack, pointer, length)/ ;" function 7 { }	{ obstack obstack_grow }
vop		vax-inst.h	/^struct vop			\/* vax instruction operand           / ;" global 1 { md_assemble vip }	{ }
vot		vax-opcode.h	/^struct vot			\/* vax opcode text *\// ;" global 1 { vip_begin }	{ }
vot_code		vax-opcode.h	/^#define vot_code code/ ;" macro 1 { vip }	{ }
vot_detail		vax-opcode.h	/^#define vot_detail detail/ ;" macro 1 { vip_begin }	{ }
vot_how		vax-opcode.h	/^#define vot_how args/ ;" macro 1 { vip }	{ }
vot_name		vax-opcode.h	/^#define vot_name name/ ;" macro 1 { vip_begin }	{ name }
vot_wot		vax-opcode.h	/^struct vot_wot			\/* vax opcode table: wot to do wi/ ;" global 1 { vip }	{ }
votstrs		vax-opcode.h	/^votstrs[] =/ ;" global 339 { vip_begin }	{ }
what		hash.c	/^what(description)/ ;" function 17 { ENCODE_RELAX Mhash output_write stab }	{ answer }
whattable		hash.c	/^whattable()			\/* determine number: what hash table/ ;" function 24 { Mhash }	{ TABLES answer h hashtable number }
where		gdb.c	/^static char *		where;	\/* Where we put symbol file / ;" global 1 { fix_new fix_new_ns32k fixup_segment gdb_alter gdb_begin gdb_emit gdb_mach_O_emit input_file_give_next_buffer md_convert_frag obstack_copy obstack_copy0 obstack_grow obstack_grow0 output_file_append }	{ }
write_object_file		write.c	/^write_object_file()/ ;" function 565 { Mas }	{ BAD_CASE EXEC_MACHINE_TYPE NULL SUB_SEGMENT_ALIGN VMS_Check_For_Main VMS_write_object_file a_out_to_mach_O append broken_word broken_words bss_address_frag data0_frchainP data_fix_root data_frag_root data_last_frag emit_relocations fixS fix_new fixup_segment flagseen frag fragS frag_align frag_now frag_wane frchain frchain_root gdb_emit gdb_end gdb_mach_O_emit get_objc_section_bounds know local_bss_counter md_convert_frag md_create_long_jump md_create_short_jump md_long_jump_size md_number_to_chars md_short_jump_size name next_object_file_charP omagic out_file_name output_file_append output_file_close output_file_create register relax_addressT relax_segment size_of_the_object_file string_byte_count subseg_change subseg_new sy_name sy_type sy_value symbolS symbol_rootP text_fix_root text_frag_root (etc) }
xfree		as.h	/^#define xfree free/ ;" macro 1 { obstack_chunk_free }	{ }
xmalloc		xmalloc.c	/^char * xmalloc(n)/ ;" function 13 { VMS_Check_For_Main VMS_write_object_file a_out_to_mach_O add_file add_vector cons gdb_begin hash_grow input_scrub_begin md_begin new_0 new_1 new_2 new_sfg obstack_chunk_alloc read_a_source_file read_begin stralloc write_object_file }	{ }
xrealloc		xrealloc.c	/^xrealloc (ptr, n)/ ;" function 11 { grow_bignum read_a_source_file }	{ }
zero		flonum-const.c	/^static LITTLENUM_TYPE zero[] = {     1 };/ ;" global 1 { }	{ }
zero_address_frag		as.h	/^COMMON fragS zero_address_frag;	\/* For foreign-seg/ ;" global 1 { SIZEOF_STRUCT_FRAG operand pseudo_set relax_segment s_comm s_lsym stab symbol_find_or_make write_object_file }	{ }
