Changes for the 0.93 release (the -14 compiler release):
- Added a warning for libraries that do not have __.SYMDEF table of contents
  to run ranlib(1).
- Added check for dates of library and __.SYMDEF member to detect out of date
  libraries and then just did a linear search of the library.
- Fixed a bug when a linear search of a library was done that it core dumped
  because of assigning to a free'ed "subentry" field.

Changes for the 0.93 release (the -12 compiler release):
- Added the SG_NORELOC flag to segments that are created from files (-segcreate)
  in non MH_PRELOAD files.  Also symbol names for these segment are now only
  defined in MH_PRELOAD files.
- Ifdef off all the code to handle symsegs so they are never outputted.  They
  are ignored on input.
- Added -O to the Makefile (some how it was not there).
- Removed the -z -N -n options and taking a.out files as input.
- Changed the handling of -segcreate names when they are too long.  Now only
  if non-unique names (in 16 chars) are encountered is a message printed.
  Now the message is fatal.
- Added the S_CSTRING_LITERALS to the selector strings section's flags.

Changes for the 0.91 release (the -10 compiler release):
- Changed the default to not use lazy_gdb_symsegs (-G now the default, -g was
  the default previously).

Changes for the 0.91 release (the -10 compiler release):
- Patched (not fixed) a bug in doing the relocation for thr global and static
  data of a shlib.  The problem was with a symbol plus offset relocation item
  where the expression was not in the same section as the value of the symbol.
  The patch was if there is no global data in the file then the data relocation
  is a static data relocation (which is always correct).  But the problem could
  exist if there is both static and global data in the same file (which is not
  the case in the current shlibs).
- Changed that with -A the symsegs from the -A file get copied into the output
  file.
- Added the -seglinkedit option which creates a segment that maps all the info
  managed by the linkeditor (relocation entries, symbol table, etc).  This is
  intended to be used by dynaload.  This segment is NOT checked for overlap
  because it's size is not know until after the object file is written.
- Major addition of the __OBJC segment and it's three sections and all that
  intailed for the new objective-C runtime.
- Fixed two bugs with respect to -A.  The first was to ignore the just_syms_flag
  object's segments (otherwise it would get not loaded at zero and unknown
  segment errors).  The second was that shared library symbols are also ignored
  if the -A flag is set (otherwise it would get shared library too small
  errors).
- Fixed a set of bugs where if the filetype of a Mach-O was changed from
  an executable to a relocatable (or back and forth) with command line args
  and there was something that chanded the mach_headers_size (like -segcreate)
  the resulting file would be written and loaded at the incorrect offset and
  addresses.
- Fixed a bug in the output of relocation entries where it the program was
  NOT loaded at zero (for example ld -r -d -Mach ...) the r_address fields
  would be wrong (offset by the text starting address).  This was found as
  as a result of merging coptxtrel() and copdatrel() into one routine.
- Fixed the spelling of truncated in 3 error messages.

Changes for the 0.83 release (the -9 compiler release):
- Fixed a bug where the error case of having an external relocation entry for
  a non-external symbol was not checked for.  When this happened it would core
  dump ld because it expected a `symbol *' was in the n_un.name feild of the
  nlist struct for the symbol.
- Added -U <symbol name> to allow undefined symbols without complaints or
  errors.
- Fixed a bug with -I in print_init_setup() that was using symbols_offset
  instead of strings_offset when lseek'ing before reading the string table.

Changes for the 0.82 release (the -8 compiler release):
- Fixed a bug that did not get the data address correct for OMAGIC files when
  the -T flag was used.  This was because magic was assigned to
  outheader.a_magic conditionally.  This caused the 0.82 kernel to load
  incorrectly.
- Fixed a bug with -y on line 2301 a missing break.  This was the matching
  break for the case N_SECT.
- Changed the Makefile to install in /bin.

Changes for the 0.82 release (the -7 compiler release):
- Changed the default address used by -A to be __end rounded to a page.
- Removed all but one alloca() so that error checking can be done.  The one
  left is in the -y for N_INDR symbols.
- Changed the default relocatable format produced to mach-O relocatable, and
  reverse the -R and -K switches.  So now -r produces mach-O relocatable, -R
  produces an OMAGIC a.out, by default the symbols produced by ld are mach
  symbols with N_SECT and -K makes them revert back to a.out N_TEXT, etc.
  symbols.
- Added a page 0 protection segment in execute formats if page zero is not
  allocated.  (The resulting binaries will then only run under a 0.81 or
  better system).  Currently ifdef'ed PAGEZERO_PROTECT and on.
- Changed the check that required the mach headers be less than a page be done
  for all mach format files.  This allows the resulting size of an ld -A to be
  determined from a .o file by adding a pagesize to the text size then rounding.
- Changed the default format of -A to MH_EXECUTE since an entry point maybe
  required and a MH_OBJECT doesn't have it.
- Added checks for mach-O relocatables so that new sections do not get passed
  through.  Also changed the size checks of commands from != to < to allow
  them to grow (assuming they will be compatable).  Also added checks that only
  one segment command allowed for relocatables and it be loaded at zero.
- Fixed a bug in filling in MACH_SHLIB_ROOT's symreloffset field that was not
  taking into account that new maps are added to each MACH_ROOT that effects
  the length.
- Added header_addr to fvmlib load and id commands and filled it in.
- Added indirect module descriptor table (__NX_modDescIndirectTable) for
  executable and new module descriptor table for executable (it's not to have
  a symbol name but is pointed to the first entry in indirect table).  The
  shared library's module descriptors (__NX_modDescTable<shlib tag>) will
  have to be built by hand.  These table will be filled in with pointers to
  symbols with names prefixed with __NX_modDesc_ .  See comments in ldsyms.h
- Changed the setting of page_size to a cpp macro passed in from the Makefile
  and not use getpagesize().
- Changed all ROUND_LONG's to round(x, sizeof(long)); Because cast on left hand
  side is no longer legal in ANSI C (a late -6 compiler change).

Changes for the 0.8.1 release (the -6 compiler release):
- Changed the loader defined symbol names _etext, _edata, and _end to __etext,
  __edata, __end so not to pollute the name space of ANSI C programs.  The
  ANSI C library will have objects with indirect symbols so that old names will
  still work if the program is linked with the ANSI C library.
- Changed the loader to take in mach-O relocatables output files and produce
  them as output (currently only with -R to become the default in 0.9).  With
  this change ANY mach-O output that has relocation entries must have them in
  mach-O form.  This is NOT the case for nlist symbols or symsegs.  Symbols are
  left the way they appear as input to the loader (with loader created symbols,
  local file symbols and link-editor defined symbol types switchable by the -K
  flag).  Symsegs are base on the type of symsegs as seen as input.  So it is
  possible to have mixed symbol types and symsegs types but NOT relocation
  entries.
- Added the mach-O MH_PRELOAD format to be used with proms and kernels.  This is
  different from MH_EXECUTE format in that the headers are not part of the text
  and the segments are NOT padded out to page boundaries (the -p option).
- Added indirect symbols types N_INDR for supporting building the ansi C
  library.
- Added loader defined names for sections beginnings and ends as well as added
  loader defined names for the segments and sections beginings and ends of the
  known segments and sections.  For example __DATA__bss__begin, etc.  The names
  for known segments are not created for target shared libraries.

- Fixed -s not working with mach-O outputs.
- Fixed bugs with -A.  First, that it complained about redefining the loader
  defined symbol __shared_library_initialization (which is just a warning).
  The resulting output file was loaded at the wrong default address, the
  default address for the output filetype, and not the value of the symbol
  _end.  Fixed ld so it could take a mach-O file, MH_EXECUTE or MH_PRELOAD, as
  the argument to -A.  This still is NOT tested throughly.
- Fixed the problem of ld not checking to see if loader defined symbols were
  previously defined before defining them.  Also only define them if they are
  referenced.
- Fixed a bug where the default address of OMAGIC files was incorrectly 0x2000,
  the value used for ZMAGIC and NMAGIC, and not 0.
- Fixed a bugs that would not allow -a to be used with -r.  The bugs were that
  write_rel needed to know about aliased symbols to set the correct def_count
  in the aliased symbol that is used to calculate the r_symbolnum field.  The
  previous version would get an "internal error" in write_rel.
- Two more fixes to generating relocation entries for common symbols with -r.
  sp->max_sommon_size is used now and not sp->refs->n_value, this will work for
  a single .o but not multiple .o where the last ref is not a common.  Also -d
  forcing common to be allocated is also checked so that they will be local
  when -r -d is used.
- Fixed -d to define loader defined symbols also.
- For -r the -G flag is assumed so that lazy_gdb_symtabs is NOT used for
  relocatable outputs.

Changes for the 0.8 release:
- Fixed a bug in checking the n_strx in list_file_locals which should only have
  been done in the case the name was to be printed.  This caused a bogus error
  message to be generated.  This only happens with -M.
- Fixed overlapping checking which didn't include bss_size.
- Added overlap checking of all segments except the unix thread stack.
- Cleaned up the error handling routines to take a variable number of arguments.
- Added the -ident option.
- Fixed a bug that didn't get the 2..n sections of segments created from files
  offset right as well as not writing out the section data.  The bottom of the
  second loop in write_seg_create() was missing: slp = slp->next; .
